#!/usr/bin/env bash
#chilicuil <chilicuil@gmail.com> 2012
#rm_, is a wrapper for the existing rm command compatible with nautilus and other
#trash management tools

# -f files are removed and NOT archived
# -l list archived files
# -c remove permanently archived files
# -u recover archived files
# -h usage

#Taken initially from 'Wicked Cool Shell Scripts: 101 Scripts for Linux, Mac
#OS X, and Unix Systems'

#If you improve it, please drop me an email, I'll buy you a coffee =)

trash_dir="$HOME/.local/share/Trash"

if [ $# -eq 0 ] ; then # let 'rm' ouptut the usage error
    exec rm  #our shell is replaced by /bin/rm, keeping original status unmodified
fi

usage()
{
  echo -e "Usage: "$0" [OPTION]... FILE..."
  echo -e "Wrapper for the rm command, compatible with nautilus and other trash management tools\n"
  echo -e "  -f         files are removed instead archived, this calls \`rm' directly"
  echo -e "  -l         list archived files, use -ll and -lll to increase verbosity"
  echo -e "  -c         remove permanently archived files"
  echo -e "  -u         recover archived files"
  echo -e "  -y         say yes to all questions"
  echo -e "  -h         shows this message, use --help to obtain \`rm' help"
  echo -e "\n"$0" delete directories and files with no distintion therefore no -r option is needed"
  
}

#http://www.makkintosshu.com/journal/a-realpath-implementation-in-bash
realpath()
{
	local success=true

	# start with the file name (sans the trailing slash)
	local path="$1"
	path="${path%/}"

	# get the basename of the file (ignoring '.' & '..', because they're really part of the path)
	local file_basename="${path##*/}"
	if [[ ( "$file_basename" = "." ) || ( "$file_basename" = ".." ) ]]; then
		file_basename=""
	fi

	# extracts the directory component of the full path & attempt to change to it
	local directory="${path%$file_basename}"
	if [ "$directory" ]; then
	  if ! cd "$directory" &>/dev/null ; then
	  	success=false
	  fi
	fi

	if $success; then
		# does the filename exist?
		if [[ ( ! -z "$file_basename" ) && ( ! -e "$file_basename" ) ]]; then
			success=false
		fi

		# get the absolute path of the current directory & change back to previous directory
		local abs_path="$(pwd -P)"
		cd "-" &>/dev/null

		# Append base filename to absolute path
		abs_path="${abs_path}/${file_basename}"

		# output the absolute path
		echo "$abs_path"
	fi

	$success
}

#http://www.linuxmisc.com/12-unix-web-servers/d31beb238f7b5a6b.htm
dirname_()
{
    local dir="${1%${1##*/}}"
    [ "${dir:=./}" != "/" ] && dir="${dir%?}"
    echo "$dir"
}

list ()
{
    files_in_trash=("$trash_dir"/info/*.trashinfo)

    if [ ! -e "${files_in_trash[0]}" ] ; then
        echo "$(basename $0): Nothing to list" >&2 ; exit 1
    fi

    for data_in_trashinfo in $(find "$trash_dir"/info -name "*.trashinfo" | sort | xargs grep -A 1 -Hri "path.*$1" \
        | sed -e 's:^:|:g' -e 's:\.trashinfo.*=:|:g' | tr -d '\n'| sed -e 's:--:\n:g'); do

    datetime=$(echo "$data_in_trashinfo" | cut -d\| -f5)
    general_date=$(echo "$datetime" | cut -dT -f1)
    detail_date=$(echo "$datetime" | cut -dT -f2)
    name=$(echo "$data_in_trashinfo" | cut -d\| -f3)
    real_file=$(echo "$data_in_trashinfo" | cut -d\| -f2 | sed -e 's:\/info\/:\/files\/:g')
    if [ -e "$real_file" ]; then
        size=$(du -sh "$real_file" | awk '{print $1}')
    else
        size="0.0K"
    fi

    if [ -d "$real_file" ] ; then
        if [ "$verboselist" -gt 1 ]; then
            some="$(ls "$real_file" | wc -l | sed 's/[^[:digit:]]//g')"
            echo -e "$some\t$size\t$general_date $detail_date $name/"
            if [ "$verboselist" -gt 2 ]; then
                find "$real_file" | sed -e "s:$trash_dir/files::g" | sed -e 's:^:\t\t|_ ..:g'
            fi
        else
            echo "$name/"
        fi
    else
        if [ "$verboselist" -gt 1 ]; then
            some=1
            echo -e "$some\t$size\t$general_date $detail_date $name"
        else
            echo "$name"
        fi
    fi
    done
}

archive ()
{
    #TODO 08-08-2011 01:19 => report nautilus bug: recovering foo/1, foo/bar/1, foo/bar/rar/1
    #                         gives foo/1 foo/bar/1.2 foo/bar/rar/1.3
    for file
    do
        if [ -e "$file" ] ; then
            archive="$trash_dir/files/$(basename "$file")"
            trashinfo="$trash_dir/info/$(basename "$file").trashinfo"

            #man bash: declare -i gives to $num the integer attribute
            #declare -i num=2
            num=2

            while [ -e "$archive" ]; do
                archive="$trash_dir/files/$(basename "$file")".$num
                trashinfo="$trash_dir/info/$(basename "$file").$num.trashinfo"
                #num+=1
                num=$(($num+ 1))
            done

            #put $file & $trashinfo vars between "" to capture spaces
            echo "[Trash Info]"                         >  "$trashinfo"
            echo "Path=$(realpath "$file")"             >> "$trashinfo"
            echo "DeletionDate=$(date +%Y-%m-%dT%T)"    >> "$trashinfo"

            mv "$file" "$archive"
        else
            rm "$file"
        fi
    done
}

recover ()
{
    #TODO 08-08-2011 05:39 => "*" matchs nothing

    list "$1"

    if [ -z "$yflag" ]; then
        echo -n "Recover this items from trash? (Y/n) "
        answer=y
        read answer
    else
        answer=y
    fi

    if [ ! "$answer" == "y" ]; then
        echo "Nothing done" && exit 0
    else
        for data_in_trashinfo in $(find "$trash_dir"/info -name "*.trashinfo" | sort | xargs grep -A 1 -Hri "path.*$1" \
            | sed -e 's:^:|:g' -e 's:\.trashinfo.*=:|:g' | tr -d '\n'| sed -e 's:--:\n:g'); do

        datetime=$(echo "$data_in_trashinfo" | cut -d\| -f5)
        general_date=$(echo "$datetime" | cut -dT -f1)
        detail_date=$(echo "$datetime" | cut -dT -f2)

        real_file=$(echo "$data_in_trashinfo" | cut -d\| -f2)
        info_file="$trash_dir/info/$(basename "$real_file").trashinfo"
        file_file="$trash_dir/files/$(basename "$real_file")"

        name=$(echo "$data_in_trashinfo" | cut -d\| -f3)

        if [ ! -d $(dirname_ "$name") ]; then
            echo "mkdir -p $(dirname_ $name)"
        fi

        if [ -e "$name" ]; then
            mv "$file_file" "$name.$general_date-$detail_date.saved"
            rm "$info_file"
        else
            mv "$file_file" "$name"
            rm "$info_file"
        fi
    done
    fi
    exit
}

clean ()
{
    list "$1"

    if [ -z "$yflag" ]; then
        echo -n "Empty this items from trash? (Y/n) "
        answer=y
        read answer
    else
        answer=y
    fi

    if [ ! "$answer" == "y" ]; then
        echo "Nothing done" && exit 0
    else
        for data_in_trashinfo in $(find "$trash_dir"/info -name "*.trashinfo" | sort | xargs grep -A 1 -Hri "path.*$1" \
            | sed -e 's:^:|:g' -e 's:\.trashinfo.*=:|:g' | tr -d '\n'| sed -e 's:--:\n:g'); do

        real_file=$(echo "$data_in_trashinfo" | cut -d\| -f2)
        info_file="$trash_dir/info/$(basename "$real_file").trashinfo"
        file_file="$trash_dir/files/$(basename "$real_file")"

        rm -rf "$info_file"
        rm -rf "$file_file"
        #echo "rm: $info_file"
        #echo "rm: $file_file"
    done
    fi
}

verboselist=0
while getopts ":fluhcry" options
do
    case $options in
        f) exec rm -r "$@"                     ;;  # exec lets us exit this script directly.
        l) verboselist=$(($verboselist+1))      ;;  # list verbose level 1-3
        u) shift $(($OPTIND - 1)); recover "$@" ;;  # remove the -u
        h) usage                                ;;
        c) shift $(($OPTIND - 1)); clean "$@"   ;;
        r)                                      ;;
        y) yflag=yes ;;
        *) exec rm "$@"                        ;;  # send the rest to rm
    esac
done
shift $(($OPTIND - 1))

if [ $verboselist -gt 0 ]; then
    list "$@"
    exit 0
fi

# Make sure that the $trash_dir exists
if [ ! -d "$trash_dir" ] ; then
    if [ ! -w "$HOME" ] ; then
        echo "$0 failed: can't create $trash_dir in $HOME" >&2
        exit 1
    fi
    mkdir -p "$trash_dir"/{expunged,files,info}
    chmod -R 700 "$trash_dir"
fi

archive "$@"

exit 0
