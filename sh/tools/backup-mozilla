#!/bin/sh
#description: backup mozilla configurations
#usage: backup-mozilla [options] [dir]

#example: backup-mozilla
#tar: Removing leading `/' from member names
#/home/chilicuil/.mozilla/
#/home/chilicuil/.mozilla/firefox/
#...

_usage()
{
    printf "%s\\n" "Usage: $(expr "${0}" : '.*/\([^/]*\)') [options] [dir]" >&2
    printf "%s\\n" "Backup Mozilla configurations." >&2
    printf "\\n" >&2
    printf "%s\\n" "  -n           number of copies to save" >&2
    printf "%s\\n" "  -c           continue with backup even if firefox isn't running" >&2
    printf "%s\\n" "  -s           skip backup even if firefox is running" >&2
    printf "%s\\n" "  -h, --help   show this help message and exit" >&2
    printf "\\n"
    printf "%s\\n" "  dir          directory to save backups (~/.mozilla-backups by default)" >&2
    exit 1
}

_num()
{   #look for a number, returns 0 on success, 1 otherwise
    [ -z "${1}" ] && return 1
    printf "%s\\n" "${@}" | grep -v "[^0-9]" >/dev/null
}

_basename()
{   #alternative basename portable version, faster! but with possible drawbacks
    [ -z "${1}" ] && return 1 || _basename__name="${1}"
    [ -z "${2}" ] || _basename__suffix="${2}"
    case "${_basename__name}" in
        /*|*/*) _basename__name="${_basename__name##*/}"
    esac

    if [ -n "${_basename__suffix}" ] && [ "${#_basename__name}" -gt "${#2}" ]; then
        _basename__name="${_basename__name%$_basename__suffix}"
    fi

    printf "%s" "${_basename__name}"
}

_bmozilla()
{
    [ -z "${1}" ] && return 1
    mkdir -p "${1}" >/dev/null 2>&1
    if [ -d "${HOME}"/.mozilla ]; then
        if command -v "lrzip" 2>/dev/null; then
            tar cf - "${HOME}"/.mozilla | nice lrzip -N 19 -q -L 9 > "${1}"/mozilla-"$(date +%Y-%m-%d:%H:%M)".tar.lrz
        elif command -v "lzma" 2>/dev/null; then
            tar cf - "${HOME}"/.mozilla | nice lzma -9 > "${1}"/mozilla-"$(date +%Y-%m-%d:%H:%M)".tar.lzma
        elif command -v "bzip2" 2>/dev/null; then
            tar cf - "${HOME}"/.mozilla | nice bzip2 > "${1}"/mozilla-"$(date +%Y-%m-%d:%H:%M)".tar.bz2
        else
            tar cf - "${HOME}"/.mozilla | nice gzip  > "${1}"/mozilla-"$(date +%Y-%m-%d:%H:%M)".tar.gz
        fi
    else
        return 1
    fi
}

_blimiter()
{
    [ -z "${1}" ] && return 1
    [ -z "${2}" ] && return 1

    _blimiter__backups="$(find "${1}" -maxdepth 1 -type f | wc -l)"

    if [ "${_blimiter__backups}" -gt "${2}" ]; then
        rm -rf $(find "${1}" -type f -printf '%T+ %p\n' | sort | head -1 | awk '{print $2}')
    fi
}

_meta_backup_mozilla()
{
    for arg; do args="${args} ${arg}"; done
    _meta_backup_mozilla__users="$(getent passwd | awk -F: '{if ($3 >= 1000 && $3 < 60000) print $1}')"
    for _meta_backup_mozilla__user in ${_meta_backup_mozilla__users}; do
        su "${_meta_backup_mozilla__user}" -c "backup-mozilla ${args}"
    done
    exit "${$?}"
}

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add to the end of $@
    set -- "${@}" $(cat)
fi

[ X"${LOGNAME}" = X"root" ] && _meta_backup_mozilla "${@}"

for arg; do #parse options
    case "${arg}" in
        --) shift; break       ;;
        -h|--help) _usage      ;;
        -c) cont="true"; shift ;;
        -s) skip="true"; shift ;;
        -n) if [ "${#}" -gt "1" ]; then
                blimit="$(printf "%s " "${@}" | awk '{print $2}')"
                shift 2
                if ! _num "${blimit}"; then
                    printf "%s\\n" "Option \`${arg}' requires a number: '${blimit}'" >&2
                    _usage
                fi
            else
                printf "%s\\n" "Option \`${arg}' requires a parameter"; _usage
            fi ;;
        -*) printf "%s\\n" "$(expr "${0}" : '.*/\([^/]*\)'): unrecognized option \`${arg}'" >&2; _usage ;;
    esac
done

[ -z "${1}" ] && dir="${HOME}"/.mozilla-backups || dir="${1}"

if [ ! -z "${cont}" ]; then
    _bmozilla "${dir}"
elif [ ! -z "${skip}" ]; then
    :
else
    if pgrep firefox >/dev/null 2>&1; then
        _bmozilla "${dir}"
    elif [ ! -z "${blimit}" ]; then
        :
    else
        exit 1
    fi
fi

[ -z "${blimit}" ] && blimit="5"
_blimiter "${dir}" "${blimit}"
