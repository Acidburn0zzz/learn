#!/bin/sh
#description: uploads imgs to http://imgur.com
#usage: uimg img.png

#example: uimg img.png
#http://i.imgur.com/image.png

_usage() {
    printf "%s\\n" "Usage: $(expr "${0}" : '.*/\([^/]*\)') image.[png|jpg] ..."
    printf "%s\\n" "Upload images to http://imgur.com."
    printf "\\n"
    printf "%b\\n" "  -h, --help   show this help message and exit"
}

_die() {
    [ -z "${1}" ] || printf "%s\\n" "${*}" >&2
    _usage >&2; exit 1
}

_false() {
    return 1
}

_notify() {
    #output messages through the notification system, prints to
    #stdout in the worst escenario
    [ -z "${1}" ] && return 1
    if [ X"${TERM}" = X"linux" ] || [ -z "${TERM}" ]; then
        kill -9 $(pgrep notify-osd) >/dev/null 2>&1
        if ! DISPLAY=:0 notify-send -t 1000 "${1}" "${3}"; then
            if command -v "gxmessage" 2>/dev/null; then
                font="Monaco 9"
                DISPLAY=:0 gxmessage "${font:+-fn "$font"}" "${1}" "ok"
            else
                font="fixed"
                DISPLAY=:0 xmessage "${font:+-fn "$font"}" "${1}" "ok"
            fi
        fi
    else
        printf "%s\\n" "${2}"
    fi
    case "${3}" in
        *clipboard*)
            #dumping xclip's stdout to the bitbucket works around xclip's
            #failure to properly daemonize
            #https://sourceforge.net/p/xclip/patches/9/
            printf "%s" "${2}" | xclip -selection clipboard -i >/dev/null 2>&1 || \
            printf "%s" "${2}" | xsel -bi 2>/dev/null || \
            printf "%s" "${2}" | pbcopy 2>/dev/null   || :
            ;;
    esac
}

_uimg() {
    for _uimg__img; do
        if [ -f "${_uimg__img}" ] ; then
            case "${_uimg__img}" in
                *.jpg|*.JPG|*.jpeg|*.png|*.PNG)
                    _uimg__url="$( curl -s -F "image=@${_uimg__img}"               \
                                -F "key=486690f872c678126a2c09a9e196ce1b"          \
                                http://imgur.com/api/upload.xml |                  \
                                egrep -o "<original_image>(.)*</original_image>" | \
                                egrep -o "http://i.imgur.com/[^<]*")"
                    if [ -z "${_uimg__url}" ];then
                        _uimg__url="http://imgur.com api timeout"
                    else
                        _uimg__clipboard_text="Copied to clipboard!"
                    fi
                    _notify "${_uimg__url}" "${_uimg__url}" "${_uimg__clipboard_text}"
                    ;;
                *)  printf "%s\\n" "'${_uimg__img}' is not a valid image file" >&2 ;;
            esac
        else
            printf "%s\\n" "'${_uimg__img}' doesn't exist" >&2
            _false
        fi
    done
}

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add to the end of $@
    set -- "${@}" $(cat)
fi

[ "${#}" -eq "0" ] && _die

for arg in "${@}"; do #parse options
    case "${arg}" in
        -h|--help) _usage && exit ;;
        -*) _die "$(expr "${0}" : '.*/\([^/]*\)'): unrecognized option '${arg}'" ;;
    esac
done

if ! command -v "curl" >/dev/null 2>&1; then
    printf "%s\\n" "install 'curl' to run this program" >&2
    exit 1
fi

_uimg "${@}"
