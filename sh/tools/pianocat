#!/bin/sh
#description: piano emulator, based on https://raw.githubusercontent.com/ssshake/console4kids/master/piano
#usage: pianocat

#example:
#echo "D4 F4 - G4 A4 - A#4 A4 G4 - E4 C4 - D4 E4 F4 - D4 D4 - C#4 D4 E4 - C#4 C#4 - D4 F4 - G4 A4 - A#4 A4 G4 - E4 C4 - D4 E4 F4 - E4 D4 C#4 - C#4 D4 - - D4" | pianocat
#echo "T:4/4 L:1/4 D4 F4:2 ! G4 A4:2 ! A#4:.5 A4:.5 G4:2 ! E4 C4:2 ! D4:.5 E4:.5 F4:2 ! D4 D4:2 ! C#4:.5 D4:.5 E4:2 ! C#4 C#4:2 ! D4 F4:2 ! G4 A4:2 ! A#4:.5 A4:.5 G4:2 ! E4 C4:2 ! D4:.5 E4:.5 F4:2 ! E4:.5 D4:.5 C#4:2 ! C#4 D4:2 - D4:4" | pianocat

title="$(printf "%s" \
"         __                                __
 .-----.|__|.---.-.-----.-----.----.---.-.|  |_
 |  _  ||  ||  _  |     |  _  |  __|  _  ||   _|
 |   __||__||___._|__|__|_____|____|___._||____|
 |__|
 _______________________________________________
|  | | | |  |  | | | | | |  |  | | | |  |  | |  |
|  | | | |  |  | | | | | |  |  | | | |  |  | |  |
|  |w| |r|  |  |t| |y| |u|  |  |o| |p|  |  |+|  |
|  |_| |_|  |  |_| |_| |_|  |  |_| |_|  |  |_|  |
|   |   |   |   |   |   |   |   |   |   |   |   |
| a | s | d | f | g | h | j | k | l | Ã± | { | } |
|___|___|___|___|___|___|___|___|___|___|___|___|

Press any key to play, 1..7 to select an octave
      (by default 4) or Esc to exit")"

_usage()
{
    printf "%s\\n" "Usage: $(expr "${0}" : '.*/\([^/]*\)') [options]" >&2
    printf "%s\\n" "A piano emulator." >&2
    printf "\\n" >&2
    printf "%s\\n" "  -h, --help   show this help message and exit" >&2
    printf "%s\\n" "  -d, --delay  delay between notes in seconds (default 0.5)" >&2
    exit 1
}

_command()
{
    if ! command -v "${1}" >/dev/null 2>&1; then
        printf "%s\\n" "you need to install '${1}' to run this program" >&2
        exit 1
    fi
}

_str2upper()
{   #convert a string to lower string
    [ -z "${1}" ] && return 1
    printf "%s\\n" "${@}" | \
    tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    # tr '[:upper:]' '[:lower:]'
}

_float2fraction()
{
    [ -z "${1}" ] && return 1
    _float2fraction__num="${1%%.*}"
    _float2fraction__den="${1##*.}"
    [ "${_float2fraction__num}" ] && [ "${_float2fraction__num}" -eq "0" ] && _float2fraction__num=""
    _float2fraction__num="${_float2fraction__num}${_float2fraction__den}"
    _float2fraction__zero="${#_float2fraction__den}"
    _float2fraction__den="1"
    #checking if denominator or numerator is greater
    while [ "${_float2fraction__zero}" -gt "0" ]; do
        _float2fraction__den="${_float2fraction__den}0"
        _float2fraction__zero="$((${_float2fraction__zero}-1))"
    done
    if [ "${_float2fraction__num}" -gt "${_float2fraction__den}" ];then
       _float2fraction__greater="${_float2fraction__num}"
       _float2fraction__lower="${_float2fraction__den}"
    else
       _float2fraction__greater="${_float2fraction__den}"
       _float2fraction__lower="${_float2fraction__num}"
    fi #finding hcf
    while [ "${_float2fraction__lower}" -ne "0" ];do
        _float2fraction__hcf="${_float2fraction__lower}"
        _float2fraction__lower=$((${_float2fraction__greater}%${_float2fraction__lower}))
        _float2fraction__greater="${_float2fraction__hcf}"
    done #dividing numerator and denominator by hcf
    _float2fraction__num="$((${_float2fraction__num}/${_float2fraction__hcf}))"
    _float2fraction__den="$((${_float2fraction__den}/${_float2fraction__hcf}))" #answer
    printf "%s\\n" "${_float2fraction__num}/${_float2fraction__den}"
}

_ascii2int()
{
    printf '%d' "'${*}"
}

_readc()
{
    stty -echo
    stty raw
    retval="$(_ascii2int "$(dd bs=1 count=1 2> /dev/null)")"
    stty -raw
    stty echo
}

_cleanup()
{
    clear      # clear the screen
    stty echo  # show input
    tput rmcup # restore terminal view
}

_pianocat(){
    tput smcup # save current terminal view

    printf "%s\\n\\n" "${title}"
    printf "%s" "> "
    octave="4"; tempo="4/4"; length="1/4"; while :; do
        [ -z "${note}" ] || printf "%s" "> "
        if [ -z "${input}" ]; then
            _readc
            case "${retval}" in
                #change octave
                49|1)    note=""; octave="1";;
                50|2)    note=""; octave="2";;
                51|3)    note=""; octave="3";;
                52|4)    note=""; octave="4";;
                53|5)    note=""; octave="5";;
                54|6)    note=""; octave="6";;
                55|7)    note=""; octave="7";;

                #major keys
                119|w)    note="C#${octave}";; #C
                114|r)    note="D#${octave}";; #D
                116|t)    note="F#${octave}";; #F
                121|y)    note="G#${octave}";; #G
                117|u)    note="A#${octave}";; #A
                111|o)    note="C#${octave}";; #C
                112|p)    note="D#${octave}";; #D
                43|+)     note="F#${octave}";; #F

                #normal keys
                97|a)     note="C${octave}";; #C
                115|s)    note="D${octave}";; #D
                100|d)    note="E${octave}";; #E
                102|f)    note="F${octave}";; #F
                103|g)    note="G${octave}";; #G
                104|h)    note="A${octave}";; #A
                106|j)    note="B${octave}";; #B
                107|k)    note="C$((${octave}+1))";; #C
                108|l)    note="D$((${octave}+1))";; #D
                195*|'Ã±') note="E$((${octave}+1))";; #E
                123|'}')  note="F$((${octave}+1))";; #F
                125|'{')  note="G$((${octave}+1))";; #G

                27|) _cleanup; exit ;; #esc
                *)  note=""; continue;;
            esac
        else
            case "${input}" in
                *' '*)     note="${input%% *}"; input="${input#* }" ;;
                "${note}") printf "\\b\\b" && exit 0 ;;
                *)         note="${input%% *}"; input="${note%%:*}" ;;
            esac
            case "${note}" in
                T*) tempo="${note##*:}";  note=""; continue ;;
                L*) length="${note##*:}"; note=""; continue ;;
                =)  cur_len="${tempo}"   ;;
                -)  cur_len="$(awk "BEGIN {printf \"%.4f\", "${tempo}"/2; exit(0)}")";;
                *:*) cur_len="${note##*:}/${tempo##*/}"; note="${note%%:*}" ;;
                !|*) cur_len="${length}" ;;
            esac
            case "${cur_len}" in
                */*) ;;
                *)   cur_len="$(_float2fraction "${cur_len}")" ;;
            esac
            printf "tempo: %s, "  "${tempo}"
            printf "length: %s, " "${cur_len}"
        fi

        [ ! "${note}" ]  && continue
        [ "${retval}" ]  && printf "%s" "key: '${retval}', "
        printf "%s\\n" "note: ${note}"
        #play -qn synth 1 pluck "${note}" >/dev/null 2>&1
        play -qn synth 2 pluck "${note}" >/dev/null 2>&1 &
        [ "${input}" ] && sleep $(awk "BEGIN {printf \"%.4f\", "${cur_len}" * "${delay}" / (1/${tempo##*/}); exit(0)}")
    done
}

trap _cleanup 1 15

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, save it
    input="$(cat)"
    input="$(_str2upper "${input}")"
    input="$(printf "%s" "${input}" | awk '{ sub(/[ \t]+$/, ""); sub(/^[ \t]+/, ""); print }')"
fi

for arg; do #parse options
    case "${arg}" in
        --) shift;  break       ;;
        -h|--help)  _usage      ;;
        -d|--delay)
            if [ "${#}" -gt "1" ]; then
                shift; delay="${1}"; shift
            else
                printf "%s\\n" "Option '${arg}' requires a parameter"; _usage
            fi ;;
    esac
done

_command "play"
[ -z "${delay}" ] && delay="0.5"

_pianocat
