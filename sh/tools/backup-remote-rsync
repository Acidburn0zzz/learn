#!/bin/sh
#description: backup directories to a remote system
#usage: backup-remote-rsync -r DOMAIN:PATH [-h|-v|-s|-o|-n|-u USER|-p PORT|-i SSH KEY|-l LOGFILE] [LOCAL_DIR ...]

#example: backup-remote-rsync -r b.javier.io:~/backup/$(hostname -f) -v -u admin -i /home/user/.ssh/id_rsa /home/user
#creates backup-remote-rsync.log  root-home-user/  root-home-user.dotfiles/ inside b.javier.io:~/backup/$(hostname -f)
#==================================
#Fri May  2 00:27:38 CDT 2013
#==================================
#[V]: exec         : ssh -o PasswordAuthentication=no ...
#[V]: files        : /home/user|
#[V]: remote user  : admin
#[V]: remote server: b.javier.io:~/backup/sup
#[V]: remote port  : 22
#[V]: ssh key      : /home/user/.ssh/id_rsa
#[V]: log          : /tmp/backup-remote-rsync.log
#[V]: exec         : ssh -i /home/user/.ssh/id_rsa ...
#[V]:
#[V]: realpath     : /home/user
#[V]: remotepath   : root-home-user
#[V]: exec         : rsync -avz ---partial -e "ssh -i /home/user ...
#sending incremental file list
#deleting 05b_refusal.pdf
#code/learn/sh/lib
#code/learn/sh/is/kernel-ck-ubuntu
#...

_basename()
{
    [ -z "${1}" ] && return 1 || _basename__name="${1}"
    [ -z "${2}" ] || _basename__suffix="${2}"
    case "${_basename__name}" in
        /*|*/*) _basename__name="$(expr "${_basename__name}" : '.*/\([^/]*\)')" ;;
    esac

    if [ -n "${_basename__suffix}" ] && [ "${#_basename__name}" -gt "${#2}" ]; then
        if [ X"$(printf "%s" "${_basename__name}" | cut -c"$((${#_basename__name} - ${#_basename__suffix} + 1))"-"${#_basename__name}")" \
           = X"$(printf "%s" "${_basename__suffix}")" ]; then
            _basename__name="$(printf "%s" "${_basename__name}" | cut -c1-"$((${#_basename__name} - ${#_basename__suffix}))")"
        fi
    fi

    printf "%s\\n" "${_basename__name}"
}

_realpath()
{
    _realpath__success="true"
    _realpath__path="${1}"

    # make sure the string isn't empty as that implies something in further logic
    if [ -z "${_realpath__path}" ]; then
        _realpath__success="false"
    else
        # start with the file name (sans the trailing slash)
        _realpath__path="${_realpath__path%/}"

        # if we stripped off the trailing slash and were left with nothing, that means we're in the root directory
        [ -z "${_realpath__path}" ] && _realpath__path="/"

        # get the basename of the file (ignoring '.' & '..', because they're really part of the path)
        _realpath__file_basename="${_realpath__path##*/}"
        if [ X"${_realpath__file_basename}" = X"." ] || [ X"${_realpath__file_basename}" = X".." ]; then
            _realpath__file_basename=""
        fi

        # extracts the directory component of the full path, if it's empty then assume '.' (the current working directory)
        _realpath__directory="${_realpath__path%${_realpath__file_basename}}"
        [ -z "${_realpath__directory}" ] && _realpath__directory="."

        # attempt to change to the directory
        if ! \cd "${_realpath__directory}" >/dev/null 2>/dev/null; then
            _realpath__success="false"
        fi

        if "${_realpath__success}"; then
            # does the filename exist?
            if [ -n "${_realpath__file_basename}" ] && [ ! -e "${_realpath__file_basename}" ]; then
                _realpath__success="false"
            fi

            # get the absolute path of the current directory & change back to previous directory
            _realpath__abs_path="$(pwd -P)"
            \cd "-" >/dev/null 2>/dev/null

            # Append base filename to absolute path
            if [ X"${_realpath__abs_path}" = X"/" ]; then
                _realpath__abs_path="${_realpath__abs_path}${_realpath__file_basename}"
            else
                _realpath__abs_path="${_realpath__abs_path}/${_realpath__file_basename}"
            fi

            # output the absolute path
            printf "%s\\n" "${_realpath__abs_path}"
        fi
    fi
}

_logger()
{
    if [ -n "${logfile}" ]; then
        printf "%s\\n" "${*}" | tee -a "${logfile}"
    else
        printf "%s\\n" "${*}"
    fi
}

_verbose()
{
    [ -z "${1}" ] && return 1
    [ -n "${verbose_flag}" ] && _logger "[V]: ${*}"
}

_printtime()
{  #format seconds to a pretty string
    [ -z "${1}" ] && return 1
    printf "%s\\n" "${1}" | grep -v "[^0-9]" >/dev/null || return 1;

    _printtime__num="${1}"
    _printtime__min="0"
    _printtime__hour="0"
    _printtime__day="0"
    if [ "${_printtime__num}" -gt "59" ]; then
        _printtime__sec="$((${_printtime__num} % 60))"
        _printtime__num="$((${_printtime__num} / 60))"
        if [ "${_printtime__num}" -gt "59" ]; then
            _printtime__min="$((${_printtime__num} % 60))"
            _printtime__num="$((${_printtime__num} / 60))"
            if [ "${_printtime__num}" -gt "23" ]; then
                _printtime__hour="$((${_printtime__num} % 24))"
                _printtime__day="$((${_printtime__num} / 24))"
            else
                _printtime__hour="${_printtime__num}"
            fi
        else
            _printtime__min="${_printtime__num}"
        fi
    else
        _printtime__sec="${_printtime__num}"
    fi
    printf "%s\\n" "${_printtime__day}d ${_printtime__hour}h ${_printtime__min}m ${_printtime__sec}s"
}

_hasdotfiles()
{
    [ -z "${1}" ] && return 1
    [ -z "$(find "${1}" -maxdepth 1 -iname ".*" | awk '! /^.$/ {print $1}')" ] && return 1
    return 0
}

_internetavailable()
{
    ping -q -w 1 -c 1 google.com >/dev/null 2>&1 && return 0 || return 1
}

_backup()
{
    [ -z "${1}" ] && return 1 || _backup__files="${1}"
    [ -z "${2}" ] && return 1 || _backup__remote_user="${2}"
    [ -z "${3}" ] && return 1 || _backup__remote_server="${3}"
    [ -z "${4}" ] && return 1 || _backup__remote_port="${4}"
    [ -z "${5}" ] && return 1 || _backup__sshkey="${5}"
    [ -n "${dryrun_flag}" ]   && _backup__dry_run="--dry-run"

    if rsync -h | grep -- --detect-renamed >/dev/null; then
        _backup__extra_flags="--detect-renamed"
    fi

    _backup__start="$(date +%s)"

    _backup__ssh_mkdir="$(printf "%s %s" "ssh -p ${_backup__remote_port} -i ${_backup__sshkey}" \
        "${_backup__remote_user}@$(printf "%s" "${_backup__remote_server}" | \
        cut -d':' -f1) \"mkdir backup 2>/dev/null; mkdir backup/$(hostname -f) 2>/dev/null\"")"
    _verbose "exec         : ${_backup__ssh_mkdir}"
    [ -z "${ommit_flag}" ] && eval "${_backup__ssh_mkdir}" | tee -a "${logfile}"

    OLDIFS="${IFS}"
    IFS="|"

    for file in ${_backup__files}; do
        _verbose " "
        _backup__realpath="$(_realpath "${file}")"
        _backup__remotepath="$(printf "%s" "${_backup__realpath}" |           \
            awk '{sub(/\//,"root-"); print $0}' | awk '{gsub(/\//,"-"); print $0}')"
        case "${_backup__remotepath}" in
            *-) _backup__remotepath="$(printf "%s" "${_backup__remotepath}" | \
                cut -c1-"$((${#_backup__remotepath} - 1))")" ;;
        esac

        _verbose "realpath     : ${_backup__realpath}"
        _verbose "remotepath   : ${_backup__remotepath}"

        if [ -d "${_backup__realpath}" ]; then
            _backup__rsync="$(printf "%s %s %s %s %s" "rsync ${_backup__dry_run} -avz"  \
                "-e \"ssh -p ${_backup__remote_port} -i ${_backup__sshkey}\" --partial" \
                "--one-file-system --delete --exclude=.gvfs ${_backup__realpath}/"         \
                "${_backup__extra_flags}" \
                "${_backup__remote_user}@${_backup__remote_server}/${_backup__remotepath}")"
            _verbose "exec         : ${_backup__rsync}"
            [ -z "${ommit_flag}" ] && eval "${_backup__rsync}" | tee -a "${logfile}"

            #TODO 07-08-2014 03:03 >> separe dotfiles
            #if _hasdotfiles "${_backup__realpath}"; then
                #_backup__dotfiles="${_backup__remotepath}.dotfiles"
                #_verbose "dotfiles     : ${_backup__dotfiles}"
                #_backup__rsync="$(printf "%s %s %s %s %s %s" "ls ${_backup__realpath}"  \
                    #"| rsync ${_backup__dry_run} -avz -e "                                 \
                    #"\"ssh -p ${_backup__remote_port} -i ${_backup__sshkey}\""          \
                    #"--one-file-system  --delete --partial --exclude-from=-"                  \
                    #"--exclude=.gvfs ${_backup__extra_flags} ${_backup__realpath}/"     \
                    #"${_backup__remote_user}@${_backup__remote_server}/${_backup__dotfiles}")"
                    #_verbose "exec         : ${_backup__rsync}"
                    #[ -z "${ommit_flag}" ] && eval "${_backup__rsync}" | tee -a "${logfile}"
            #else
                #_verbose "dotfiles     : no"
            #fi
        elif [ -f "${_backup__realpath}" ]; then
            _backup__rsync="$(printf "%s %s %s %s %s" "rsync ${_backup__dry_run} -avz"   \
               "-e \"ssh -p ${_backup__remote_port} -i ${_backup__sshkey}\" --partial"   \
               "--one-file-system --delete --partial ${_backup__extra_flags}"               \
               "${_backup__realpath}" \
               "${_backup__remote_user}@${_backup__remote_server}/${_backup__remotepath}")"
            _verbose "exec         : ${_backup__rsync}"
            [ -z "${ommit_flag}" ] && eval "${_backup__rsync}" | tee -a "${logfile}"
        fi
    done

    IFS="${OLDIFS}"

    _backup__end="$(date +%s)"
    _backup__diff="$((${_backup__end} - ${_backup__start}))"

    _logger "$(printf "%*s\\n" "34" ''  | tr ' ' =)"
    _logger "Total time: $(_printtime "${_backup__diff}")"
    _logger "$(printf "%*s\\n" "34" ''  | tr ' ' =)"

    rsync -e "ssh -p ${_backup__remote_port} -i ${_backup__sshkey}" \
        "${logfile}" "${_backup__remote_user}@${_backup__remote_server}"
}

_usage()
{
    printf "%s\\n" "Usage: $(_basename "${0}") -r domain:/path [options] [local_dir ...]" >&2
    printf "%s\\n" "Backup directories to a remote system." >&2
    printf "\\n" >&2
    printf "%s\\n" "Required arguments:" >&2
    printf "%s\\n" "  -r domain|ip:/path     remote server" >&2
    printf "\\n" >&2
    printf "%s\\n" "Optional arguments:" >&2
    printf "%s\\n" "  local_dir|local_file   dirs|files to backup [${HOME}]" >&2
    printf "%s\\n" "  -v                     verbose" >&2
    printf "%s\\n" "  -s                     skip ssh auth pre-tests" >&2
    printf "%s\\n" "  -o                     omit executing commmands, useful with -v" >&2
    printf "%s\\n" "  -n                     dry run, list files to be modified" >&2
    printf "%s\\n" "  -u user                remote user    [${USER}]" >&2
    printf "%s\\n" "  -p port                remote port    [22]" >&2
    printf "%s\\n" "  -i ssh key             ssh public key [${HOME}/.ssh/id_rsa]" >&2
    printf "%s\\n" "  -l file                log file       [/tmp/$(_basename "${0}").log ]" >&2
    printf "%s\\n" "  -h, --help             show this help message and exit" >&2
    printf "\\n" >&2
    printf "%s\\n" "NOTE: ssh key authentication must be configured for this script to work" >&2
    exit 1
}

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add to the end of $@
    set -- "${@}" $(cat)
fi

[ "${#}" -eq "0" ] && _usage

for arg; do #parse options
    case "${arg}" in
        -h|--help) _usage  ;;
        -v) verbose_flag="true";   shift ;;
        -n) dryrun_flag="true";    shift ;;
        -o) ommit_flag="true";     shift ;;
        -s) skip_ssh_tests="true"; shift ;;
        -u) if [ "${#}" -gt "1" ]; then
                remote_user="$(printf "%s " "${@}" | awk '{print $2}')"
                shift 2
            else
               printf "%s\\n" "Option \`${arg}' requires a parameter" >&2; _usage
            fi ;;
        -p) if [ "${#}" -gt "1" ]; then
                remote_port="$(printf "%s " "${@}" | awk '{print $2}')"
                shift 2
            else
               printf "%s\\n" "Option \`${arg}' requires a parameter" >&2; _usage
            fi ;;
        -r) if [ "${#}" -gt "1" ]; then
                remote_server="$(printf "%s " "${@}" | awk '{print $2}')"
                shift 2
            else
               printf "%s\\n" "Option \`${arg}' requires a parameter" >&2; _usage
            fi ;;
        -i) if [ "${#}" -gt "1" ]; then
                sshkey="$(printf "%s " "${@}" | awk '{print $2}')"
                shift 2
            else
               printf "%s\\n" "Option \`${arg}' requires a parameter" >&2; _usage
            fi ;;
        -l) if [ "${#}" -gt "1" ]; then
                logfile="$(printf "%s " "${@}" | awk '{print $2}')"
                shift 2
            else
               printf "%s\\n" "Option \`${arg}' requires a parameter" >&2; _usage
            fi ;;
        -*) printf "%s\\n" "$(expr "${0}" : '.*/\([^/]*\)'): unrecognized option \`${arg}'" >&2; _usage ;;
    esac
done

if ! command -v "rsync" >/dev/null; then
    printf "%s\\n" "you need to install 'rsync' to run this program" >&2; exit 1
elif ! command -v "ssh" >/dev/null; then
    printf "%s\\n" "you need to install 'ssh' to run this program" >&2; exit 1
fi

exec 9>/tmp/"$(_basename "${0}")".lock #verify that only one instance is running
[ X"${LOGNAME}" = X"root" ] && chmod 666 /tmp/"$(_basename "${0}")".lock
if ! flock -n 9  ; then              #http://mywiki.wooledge.org/BashFAQ/045
    printf "%s\\n" "$(_basename "${0}"): another instance is running";
    exit 1
fi

[ -z "${logfile}" ]     && logfile="/tmp/$(_basename "${0}").log"
[ -z "${remote_user}" ] && remote_user="${USER}"
[ -z "${remote_port}" ] && remote_port="22"

if [ -z "${remote_server}" ]; then
    printf "%s\\n" "$(_basename "${0}"): no remote server specified" >&2
    _usage
else
    if [ -z "$(printf "%s" "${remote_server}" | awk -F":" '{print $2}')" ]; then
        if [ X"${remote_user}" = X"${USER}" ]; then
            remote_server="${remote_server}:~/backup/$(hostname -f)"
        else
            remote_server="${remote_server}:/home/${remote_user}/backup/$(hostname -f)"
        fi
    fi
fi

if [ -z "${ommit_flag}" ]; then
    if ! _internetavailable; then
        printf "%s\\n" "$(_basename "${0}"): no internet access, exiting." >&2
        exit 1
    fi
fi

_logger "$(printf "%*s\\n" "34" ''  | tr ' ' =)"
_logger "$(date)"
_logger "$(printf "%*s\\n" "34" ''  | tr ' ' =)"

if [ -z "${1}" ]; then
    files="${HOME}"
else
    for file; do
        [ ! -r "${file}" ] && { _logger "[W]: ${file} does not exist or is not readable, skipping"; continue; }
        files="${file}""|""${files}"
    done
fi

if [ -z "${sshkey}" ]; then
    OLDIFS="${IFS}"
    IFS="|"

    for file in ${files}; do
        if [ -f "${file}"/.ssh/id_rsa ]; then
            sshkey="${file}"/.ssh/id_rsa
            break
        fi
    done

    if [ -z "${sshkey}" ]; then
        [ -f "${HOME}"/.ssh/id_rsa ] && sshkey="${HOME}"/.ssh/id_rsa
    fi

    IFS="${OLDIFS}"
fi

if [ -z "${skip_ssh_tests}" ]; then
    [ -z "${sshkey}" ] && { _logger "[E]: no ssh key found!, you may try options -i or -s"; printf "\\n" >&2; _usage; }

    remote_ip="$(printf "%s" "${remote_server}"|cut -d':' -f1)"
    ssh_auth_test="$(printf "%s %s %s %s" "ssh -o PasswordAuthentication=no"      \
       "-o ChallengeResponseAuthentication=no -o GSSAPIAuthentication=no"         \
       "-o KbdInteractiveAuthentication=no -p ${remote_port} -i ${sshkey}"        \
       "${remote_user}@${remote_ip} ls")"

    _verbose "exec         : ${ssh_auth_test}"
    if [ -z "${ommit_flag}" ]; then
        if ! eval "${ssh_auth_test}" >/dev/null 2>&1; then
            _logger "[E]: couldn't connect to remote server, wrong username/ssh key, try options -u or -s"
            printf "\\n"; _usage
        fi
    fi
fi

_verbose "files        : ${files}"
_verbose "remote user  : ${remote_user}"
_verbose "remote server: ${remote_server}"
_verbose "remote port  : ${remote_port}"
_verbose "ssh key      : ${sshkey}"
_verbose "log          : ${logfile}"
[ X"${LOGNAME}" = X"root" ] && chmod 666 "${logfile}"

_backup "${files}" "${remote_user}" "${remote_server}" "${remote_port}" "${sshkey}" "${logfile}"
