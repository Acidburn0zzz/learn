#!/bin/sh
#description: translate string
#usage: translate [options] string

#example: translate -en-es "hello world"
#hola mundo
#example: translate -es "hola mundo"
#hello world
#example: translate -pt-es "oi mundo"
#hola mundo
#example: translate "hola mundo"
#hello world

#TODO 18-12-2015 13:32 >> add more translation apis, eg, mymemory

#https://github.com/soimort/translate-shell/issues/94#issuecomment-165433715
py_google_tk_script="
import sys
import time
import ctypes

def RL(a, b):
    for c in range(0, len(b)-2, 3):
        d = b[c+2]
        d = ord(d) - 87 if d >= 'a' else int(d)
        xa = ctypes.c_uint32(a).value
        d = xa >> d if b[c+1] == '+' else xa << d
        a = a + d & 4294967295 if b[c] == '+' else a ^ d
    return ctypes.c_int32(a).value

def calc_tk(a):
    b = int(time.time() / 3600)
    if sys.version_info >= (3,):
        d = a.encode('utf-8')
    else:
        d = map(ord, a)
    a = b
    for di in d:
        a = RL(a + di, '+-a^+6')
    a = RL(a, '+-3^+b+-f')
    a = a if a >= 0 else ((a & 2147483647) + 2147483648)
    a %= pow(10, 6)
    return '%d.%d' % (a, a ^ b)

if __name__ == '__main__':
    text = ' '.join(sys.argv[1:])
    print(calc_tk(text))"

_usage() {
    printf "%s\\n" "Usage: $(expr "${0}" : '.*/\([^/]*\)') [-sl-tl] string ..."
    printf "%s\\n" "Translate strings using google online translator."
    printf "\\n"
    printf "%s\\n" "  sl   source language (auto by default)"
    printf "%s\\n" "  tl   target language (english by default)"
}

_die() {
    [ -z "${1}" ] || printf "%s\\n" "${*}" >&2
    _usage >&2; exit 1
}

_notify() {
    #output messages through the notification system, prints to
    #stdout in the worst escenario
    [ -z "${1}" ] && return 1
    if [ X"${TERM}" = X"linux" ] || [ -z "${TERM}" ]; then
        kill -9 $(pgrep notify-osd) >/dev/null 2>&1
        if ! DISPLAY=:0 notify-send -t 1000 "${1}" "${3}"; then
            if command -v "gxmessage" 2>/dev/null; then
                font="Monaco 9"
                DISPLAY=:0 gxmessage "${font:+-fn "$font"}" "${1}" "ok"
            else
                font="fixed"
                DISPLAY=:0 xmessage "${font:+-fn "$font"}" "${1}" "ok"
            fi
        fi
    else
        printf "%s\\n" "${2}"
    fi
    case "${3}" in
        *clipboard*)
            #dumping xclip's stdout to the bitbucket works around xclip's
            #failure to properly daemonize
            #https://sourceforge.net/p/xclip/patches/9/
            printf "%s" "${2}" 2>/dev/null | xclip -selection clipboard -i >/dev/null 2>&1 || \
            printf "%s" "${2}" 2>/dev/null | xsel -bi 2>/dev/null || \
            printf "%s" "${2}" 2>/dev/null | pbcopy 2>/dev/null   || :
            ;;
    esac
}

_tk() {
    if command -v "python" >/dev/null 2>&1; then
        printf "%s\\n" "${py_google_tk_script}" > /tmp/_tk.py
        python /tmp/_tk.py "${*}"
        rm -rf /tmp/_tk.py
    else
        #TODO 18-12-2015 12:36 >> additional tk implementations
        :
    fi
}

_translate() {
    [ -z "${1}" ] && return 1
    #update 14-12-2012 05:06: http://crunchbang.org/forums/viewtopic.php?id=17034
    _translate__phrase="${*}"
    _translate__page="$(curl -s -i --user-agent "" -d "sl=${sl}"  \
                        -d "tl=${tl}" -d "client=t" -d "ie=UTF-8" \
                        -d "oe=UTF-8" -d tk="$(_tk "${_translate__phrase}")" \
                        --data-urlencode "text=${_translate__phrase}"        \
                        http://translate.google.com/translate_a/t)"
    _translate__result="$(printf "%s" "${_translate__page}" | tail -1 | \
                          cut -d\" -f2)"

    if [ -z "${_translate__result}" ];then
       _translate__result="Translation api timeout"
    else
        _translate__clipboard_text="Copied to clipboard!"
    fi

    _notify "${_translate__result}" "${_translate__result}" \
            "${_translate__clipboard_text}"
}

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add to the end of $@
    set -- "${@}" $(cat)
fi

[ "${#}" -eq "0" ] && _die

case "${1}" in
    -h|--help) _usage && exit ;;
    --*) _die "$(expr "${0}" : '.*/\([^/]*\)'): unrecognized option '${1}'" ;;
    -*) sl="$(printf "%s" "${1}" | cut -d'-' -f2)"
        tl="$(printf "%s" "${1}" | cut -d'-' -f3)"
        if [ -z "${sl}" ] && [ -z "${tl}" ]; then
            #maybe returning an error message is better
            sl="auto"; tl="en";
        elif [ -n "${sl}" ] && [ -z "${tl}" ]; then
            tl="en";
        fi
        shift ;;
    *)  sl="auto"; tl="en"; ;;
esac

if ! command -v "curl" >/dev/null 2>&1; then
    printf "%s\\n" "install 'curl' to run this program" >&2
    exit 1
fi

_translate "${@}"
