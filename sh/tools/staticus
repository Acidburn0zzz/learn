#!/bin/sh
#description: create static status pages
#usage: staticus [options]

#example:
#$ staticus -c ~/.staticus.conf --modules "memory,swap,load" -o status.html

###############################################################################
############################## Configuration ##################################
###############################################################################

report_html="./staticus.html"
report_txt="./staticus.txt"

modules="memory,swap,load,storage,process,info"
#modules="notification,memory,swap,load,storage,process,info"

#thresholds
module_memory_threshold="80"
module_swap_threshold="80"
module_load_threshold="4"
module_storage_threshold="80"

#partitions
module_storage_partitions="/,/home"

#processes
module_process_list="mpd,rsyslogd,dbus-daemon"

module_notification_msg="Next maintenance window is programmed at Tuesday May 12th"

#notifications
notify="true"
notify_method="mailgun"
notify_contacts="admin@example.com,contact@example.com"

date_format="+%d-%m-%Y %H:%M (%Z)"
theme="default"
config_file="/etc/staticus.conf"
###############################################################################

themes="default"
theme_default='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'

_usage() {
    printf "%s\\n" "Usage: ${progname} [options]"
    printf "%s\\n" "Create static status pages."
    printf "\\n"
    printf "%s\\n" "  -c, --config /etc/staticus.conf   read options from a configuration file"
    printf "%s\\n" "  -m, --modules \"all\"               use defined modules"
    printf "%s\\n" "  -o, --output-html staticus.html   save html  status output to this file"
    printf "%s\\n" "  -O, --output-txt  staticus.txt    save plain status output to this file"
    printf "%s\\n" "  --txt2html staticus.txt           convert a plain status output to a static html page"
    printf "%s\\n" "  --theme default                   use specified html theme"
    printf "%s\\n" "  --list-modules                    list available modules"
    printf "%s\\n" "  --list-themes                     list available html themes"
    printf "%s\\n" "  -v, --verbose                     verbose mode"
    printf "%s\\n" "  -h, --help                        show this help message and exit"
}

_basename() {
    [ -z "${1}" ] && return 1 || _basename__name="${1%%/}"
    [ -z "${2}" ] || _basename__suffix="${2}"
    case "${_basename__name}" in
        /*|*/*) _basename__name="$(expr "${_basename__name}" : '.*/\([^/]*\)')" ;;
    esac

    if [ -n "${_basename__suffix}" ] && [ "${#_basename__name}" -gt "${#2}" ]; then
        if [ X"$(printf "%s" "${_basename__name}" | cut -c"$((${#_basename__name} - ${#_basename__suffix} + 1))"-"${#_basename__name}")" \
           = X"$(printf "%s" "${_basename__suffix}")" ]; then
            _basename__name="$(printf "%s" "${_basename__name}" | cut -c1-"$((${#_basename__name} - ${#_basename__suffix}))")"
        fi
    fi

    printf "%s" "${_basename__name}"
}

_die() {
    [ -z "${1}" ] || printf "%s\\n" "${*}" >&2
    _usage >&2; exit 1
}

_verbose() {
    [ -z "${1}" ] && return 1
    [ -n "${verbose}" ] && printf "%s\\n" "${*}"
}

_decode64() {
    [ ! -t 0 ] && set -- "${@}" "$(cat)"
    [ -z "${1}" ] && return 1
    if command -v "base64" >/dev/null 2>&1; then
        printf "%s\\n" "${@}" | base64 -d
    elif command -v "openssl" >/dev/null 2>&1; then
        printf "%s\\n" "${@}" | openssl enc -base64 -d
    elif command -v "awk" >/dev/null 2>&1 && (command -v "uudecode" || command -v "busybox") >/dev/null 2>&1; then
        if command -v "uudecode" >/dev/null 2>&1; then
            uudecode__bin="uudecode"
        elif command -v "busybox"  >/dev/null 2>&1; then
            uudecode__bin="busybox uudecode"
        fi
        _decode64_awk() { [ ! -t 0 ] && set -- "${@}" "$(cat)"
          [ -z "${1}" ] && return 1
          printf "%s\\n" "${@}" | sed 's/=//g' | (
            printf "begin 644 -\\n"; awk 'function _decode64_awk() {
              inp=1; out=""; while (getline) { for(i=1; i<=length($0); i++) {
                  c=substr(uu,index(b64,substr($0,i,1)),1);
                  inp++; out=(out c); if (inp==61) {
                    print "M" out; inp=1; out=""; }}}
              if (length(out)) { printf "%c", (32+3*length(out)/4); print out; }}
            BEGIN { b64="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
              uu="`!\"#$%&'\''()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_"
              _decode64_awk(); exit; }'
            printf "%s\\n%s\\n" '`' 'end' #'
          ) | $uudecode__bin
        }
        printf "%s\\n" "${@}" | _decode64_awk
    else
        _decode64_sh() { [ ! -t 0 ] && set -- "${@}" "$(cat)"
            _decode64_sh__b64='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
            _decode64_sh__n="0"; _decode64_sh__v="0"; _decode64_sh__args="$@"
            while [ "${_decode64_sh__args}" ]; do #process char by char
                _decode64_sh__char="${_decode64_sh__args%${_decode64_sh__args#?}}"
                case "${_decode64_sh__char}" in
                    '\n') continue ;;
                     '=') _decode64_sh__v="$(($_decode64_sh__v << 6))" ;;
                       *) _decode64_sh__char="${_decode64_sh__b64#*$_decode64_sh__char}"
                          _decode64_sh__char="$((${#_decode64_sh__b64}-${#_decode64_sh__char}))"
                          if [ "${_decode64_sh__char}" -eq "0" ]; then
                            [ X"${_decode64_sh__args}" = X"${_decode64_sh__char}" ] &&\
                                _decode64_sh__args='' || _decode64_sh__args="${_decode64_sh__args#?}"
                            continue
                          fi
                          _decode64_sh__v="$(($_decode64_sh__v << 6 | $_decode64_sh__char-1))"
                esac
                _decode64_sh__n="$(($_decode64_sh__n+1))"
                if [ "${_decode64_sh__n}" -eq "4" ]; then
                    _decode64_sh__s="16"; while [ "${_decode64_sh__s}" -gt "-1" ]; do
                        _decode64_sh__char="$(($_decode64_sh__v >> $_decode64_sh__s & 255))"
                        printf \\$(($_decode64_sh__char/64*100+$_decode64_sh__char%64/8*10+$_decode64_sh__char%8))
                        _decode64_sh__s="$(($_decode64_sh__s-8))"
                    done
                    _decode64_sh__v="0"; _decode64_sh__n="0"
                fi
                [ X"${_decode64_sh__args}" = X"${_decode64_sh__char}" ] &&\
                    _decode64_sh__args='' || _decode64_sh__args="${_decode64_sh__args#?}"
            done
        }
        printf "%s\\n" "${@}" | _decode64_sh
    fi
} # too hardcore for vim syntax`"

_str2lower() {
    [ -z "${1}" ] && return 1
    printf "%s\\n" "${@}" | \
    tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'
    # tr '[:upper:]' '[:lower:]'
}

_str2upper() {
    [ -z "${1}" ] && return 1
    printf "%s\\n" "${@}" | \
        tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    # tr '[:upper:]' '[:lower:]'
}

_bytes2human() {
    [ -z "${1}" ] && return 1
    #is int?
    case "${1%.*}" in
        *[!0-9]*|"") return 1 ;;
    esac

    printf "%s" "${1}" | awk '{
        split( "bytes Kb Mb Gb Tb Eb Pb Yb Zb" , v );
        s=1; while($1>=1024) { $1/=1024; s++ }
        printf("%.2f %s\n", $1, v[s])}' | sed 's:\.00 : :'
}

_loadconf() {
    #$1 => config file
    [ ! -f "${1}" ] && return 1
    _loadconf__options=$(awk '! /export/ {if ($0 ~ "^.*=[^;&]*" && $0 !~ "&&" && $1 !~ "^#") print }' "${1}")
    eval "${_loadconf__options}"
}

_escape_special_characters() {
    #http://stackoverflow.com/questions/407523/escape-a-string-for-a-sed-replace-pattern
    sed -e 's/[]\/$*.^|[]/\\&/g'
}

_failed_module() {
    [ -z "${failed_modules}" ] && failed_modules="0"
    failed_modules="$(($failed_modules+1))"
}

_module_notification() {
    [ -z "${1}" ] && return 1
    _verbose "notification module"
    _staticus_report_notification "notification" "notification" "${*}"
}

_module_memory() {
    # $1 => threshold
    [ -z "${1}" ] && return 1
    _verbose "memory module"

    _mmemory__input="$(free -b 2>&1)" && \
        _mmemory__input="$(printf "%s" "${_mmemory__input}"|grep Mem 2>&1)" || {
        _staticus_report_module "memory" "error" "${_mmemory__input}"
        return 1
    }

    _mmemory__total="$(printf "%s" "${_mmemory__input}" | awk '{print $2}')"
    _mmemory__used="$(printf  "%s" "${_mmemory__input}" | awk '{print $3}')"
    _mmemory__used_percentage="$(printf "%s" "${_mmemory__input}" | awk '{printf "%.2f", $3/$2 * 100.0}' | cut -d\. -f1)"
    _mmemory__threshold="$(printf "%s" "${_mmemory__total} ${1}"  | awk '{printf "%.2f", $1 * ($2/100)}' | cut -d\. -f1)"

    _mmemory__description="$(printf "%s\\n%s\\n%s\\n" \
        "* threshold $(_bytes2human "${_mmemory__threshold}") (${1}%)" \
        "* current   $(_bytes2human "${_mmemory__used}") (${_mmemory__used_percentage}%)" \
        "* total     $(_bytes2human "${_mmemory__total}")")"

    if [ "${_mmemory__used_percentage}" -ge "${1}" ]; then
        _staticus_report_module "memory" "warning" "${_mmemory__description}"
    else
        _staticus_report_module "memory" "ok" "${_mmemory__description}"
    fi
}

_module_swap() {
    # $1 => threshold
    [ -z "${1}" ] && return 1
    _verbose "swap module"

    _mswap__input="$(free -b 2>&1)" && \
        _mswap__input="$(printf "%s" "${_mswap__input}"|grep Swap 2>&1)" || {
        _staticus_report_module "swap" "error" "${_mswap__input}"
        return 1
    }

    _mswap__total="$(printf "%s" "${_mswap__input}" | awk '{print $2}')"
    _mswap__used="$(printf "%s" "${_mswap__input}"  | awk '{print $3}')"
    _mswap__used_percentage="$(printf "%s" "${_mswap__input}" | awk '{printf "%.2f", $3/$2 * 100.0}' | cut -d\. -f1)"
    _mswap__threshold="$(printf "%s" "${_mswap__total} ${1}"  | awk '{printf "%.2f", $1 * ($2/100)}' | cut -d\. -f1)"

    _mswap__description="$(printf "%s\\n%s\\n%s\\n" \
        "* threshold $(_bytes2human "${_mswap__threshold}") (${1}%)" \
        "* current   $(_bytes2human "${_mswap__used}") (${_mswap__used_percentage}%)" \
        "* total     $(_bytes2human "${_mswap__total}")")"

    if [ "${_mswap__used_percentage}" -ge "${1}" ]; then
        _staticus_report_module "swap" "warning" "${_mswap__description}"
    else
        _staticus_report_module "swap" "ok" "${_mswap__description}"
    fi
}

_module_load() {
    [ -z "${1}" ] && return 1
    # $1 => threshold
    _verbose "load module"

    _mload__input="$(awk '{print $1}' /proc/loadavg 2>&1)" || {
        _staticus_report_module "load" "error" "${_mload__input}"
        return 1
    }

    _mload__used_percentage="$(printf "%s" "${_mload__input} ${1}" | awk '{printf "%.2f", ($1 * 100.0) / $2}' | cut -d\. -f1)"
    _mload__description="$(printf "%s\\n%s\\n%s\\n" \
        "* threshold ${1}" \
        "* current   ${_mload__input} (${_mload__used_percentage}%)")"

    if [ "${_mload__input%.*}" -ge "${1}" ]; then
        _staticus_report_module "load" "warning" "${_mload__description}"
    else
        _staticus_report_module "load" "ok" "${_mload__description}"
    fi
}

_module_storage() {
    # $1 => threshold
    # $2 => partitions
    [ -z "${2}" ] && return 1
    _verbose "storage module"

    _mstorage__input="$(df 2>&1)" || {
        _staticus_report_module "storage" "error" "${_mstorage__input}"
        return 1
    }

    OLDIFS="${IFS}"
    IFS=","; for partition in ${2}; do
        _mstorage__partition="$(printf "%s" "${_mstorage__input}" | grep "${partition}$")"
        _mstorage__total="$(printf "%s" "${_mstorage__partition}" | awk '{print $2}')"
        _mstorage__used="$(printf "%s"  "${_mstorage__partition}" | awk '{print $3}')"
        _mstorage__used_percentage="$(printf "%s" "${_mstorage__partition}" | awk '{gsub("%",""); print $5}')"
        _mstorage__threshold="$(printf "%s" "${_mstorage__total} ${1}"  | awk '{printf "%.2f", $1 * ($2/100)}' | cut -d\. -f1)"

        #df outputs numbers in Kb, convert them to bytes
        _mstorage__used="$(($_mstorage__used*1024))"
        _mstorage__total="$(($_mstorage__total*1024))"
        _mstorage__threshold="$(($_mstorage__threshold*1024))"

        _mstorage__description="$(printf "%s\\n%s\\n%s\\n" \
            "* threshold $(_bytes2human "${_mstorage__threshold}") (${1}%)" \
            "* current   $(_bytes2human "${_mstorage__used}") (${_mstorage__used_percentage}%)" \
            "* total     $(_bytes2human "${_mstorage__total}")")"

        if [ "${_mstorage__used_percentage}" -ge "${1}" ]; then
            _staticus_report_module "storage ${partition}" "warning" "${_mstorage__description}"
        else
            _staticus_report_module "storage ${partition}" "ok" "${_mstorage__description}"
        fi
    done; IFS="${OLDIFS}"
}

_module_process() {
    # $1 => processes
    [ -z "${1}" ] && return 1
    _verbose "process module"

    _mprocess__input="$(ps aux 2>&1)" || {
        _staticus_report_module "process" "error" "${_mprocess__input}"
        return 1
    }

    OLDIFS="${IFS}"
    IFS=","; for process in ${1}; do
        _mprocess__name="$(printf "%s" "${_mprocess__input}"    | awk '/'"${process}"'/ {print; exit}')"
        _mprocess__detailed="$(printf "%s" "${_mprocess__name}" | \
            awk '{print "cpu:", $3 "%", "mem:", $4 "%s", "user:", $1, "cmd:", substr($0, index($0,$11)); exit}')"

        _mprocess__description="$(printf "%s\\n" "* ${_mprocess__detailed}")"

        if [ -z "${_mprocess__name}" ]; then
            _mprocess__description="$(printf "%s\\n" "* process isn't running")"
            _staticus_report_module "process ${process}" "warning" "${_mprocess__description}"
        else
            _staticus_report_module "process ${process}" "ok" "${_mprocess__description}"
        fi
    done; IFS="${OLDIFS}"
}

_module_info() {
    _verbose "info module"

    _minfo__uptime="$(uptime | awk '{sub(/,/," hours"); printf $3" "$4}')"
    _minfo__description="$(printf "%s\\n%s\\n%s\\n" \
        "* /etc/issue $(cat /etc/issue.net)" \
        "* uname      $(uname -snvp)" \
        "* uptime     ${_minfo__uptime}")"

    _staticus_report_module "info" "info" "${_minfo__description}"
}

_staticus_report_title() {
    [ -z "${1}" ] && return 1
    printf "%s\\n" "# title: ${1}" > "${report_txt}"
}

_staticus_report_general_status() {
    [ -z "${1}" ] && return 1

    if [ "${1}" -lt "1" ]; then
        sed -i "s/^# title:.*/&\n\n## status: ok\nEverything is running ok/" "${report_txt}"
    else
        sed -i "s/^# title:.*/&\n\n## status: error\nThere are ${1} issues/" "${report_txt}"
    fi
}

_staticus_report_notification() {
    #sed "# status:" and write after line
    # $1 => memory|swap|load|...
    # $2 => ok|warning|error|notification|...
    # $3 => msg
    [ -z "${2}" ] && return 1
    printf "\\n%s\\n" "### ${1}: ${2}" >> "${report_txt}"
    if [ -n "${3}" ]; then
        printf "%s\\n" "${3}" >> "${report_txt}"
    fi

    if [ "$(_str2lower "${notify}")" = "true" ]; then
        case "$(_str2lower "${2}")" in
            error|warning) _staticus_notify "${1}" "$(_str2upper "${2}")" "${3}" ;;
        esac
    fi
}

_staticus_report_module() {
    # $1 => memory|swap|load|...
    # $2 => ok|warning|error|info|notification|...
    # $3 => msg
    [ -z "${2}" ] && return 1

    printf "\\n%s\\n" "#### ${1}: ${2}" >> "${report_txt}"
    if [ -n "${3}" ]; then
        printf "%s\\n" "${3}" >> "${report_txt}"
    fi

    case "$(_str2lower "${2}")" in
      error|warning) _failed_module
          if [ "$(_str2lower "${notify}")" = "true" ]; then
              _staticus_notify "${1}" "$(_str2upper "${2}")" "${3}"
          fi
          ;;
    esac
}

_staticus_notify() {
    # $1 => memory|swap|load|...
    # $2 => ALERT|NOTIFICATION|CRITICAL|...
    # $3 => msg
    [ -z "${3}" ] && return 1

    _staticus_notify_mailgun() {
        if command -v "mailgun" >/dev/null; then
            for contact in ${notify_contacts}; do
                contact="$(printf "%s\\n" "${contact}" | sed "s:#%#:@:")"
                mailgun --subject "${progname} - $(hostname -f): ${1} - ${2}" "${contact}" "$(
                printf "+---Notification----------------------------+\\n"
                printf "%b\\n" "${*}"
                printf "+-------------------------------------------+\\n"
                )" >/dev/null || return 1
            done
        else
            printf "%b\\n" "mailgun is not available, install it to use this notification module" >&2
            printf "%b\\n" "https://raw.githubusercontent.com/chilicuil/learn/master/sh/tools/mailgun" >&2
            return 1
        fi
    }

    _snotify__module="${1}"; shift
    _snotify__type="${1}";   shift
    printf "%b\\n%b\\n" "${_snotify__module} - ${_snotify__type}" "${*}" >&2
    case "$(_str2lower "${notify_method}")" in
        mailgun) _staticus_notify_"${notify_method}" "${_snotify__module}" "${_snotify__type}" "${*}" ;;
              *) return 1;;
    esac
}

_inflate_theme() {
    # $1 => theme
    # $2 => report_html
    eval "_itheme__b64=\$theme_${1}"
    _itheme__tmpdir="$(mktemp -d)" || return 1
    ( cd "${_itheme__tmpdir}" && printf "%s" "${_itheme__b64}" | _decode64 | zcat | tar xvf - >/dev/null ) || \
        { rm -rf  "${_itheme__tmpdir}"; return 1; }
    for _itheme__template in "${_itheme__tmpdir}"/*; do
        [ -f "${_itheme__template}" ] || return 1
        mv "${_itheme__template}" "${2}" && rm -rf "${_itheme__tmpdir}"
        return 0
    done
}

_staticus_txt2html() {
    [ -z "${3}" ] && return 1
    _stxt2html__report_txt="${1}"
    _stxt2html__report_html="${2}"
    _stxt2html__theme="${3}"
    _inflate_theme "${_stxt2html__theme}" "${_stxt2html__report_html}" || return 1
    _stxt2html__report_txt_content="$(cat "${_stxt2html__report_txt}")"
    _stxt2html__report_html_content="$(cat "${_stxt2html__report_html}")"

    #title section
    _stxt2html__title="$(printf "%s" "${_stxt2html__report_txt_content}" | \
        awk '/^# title:/ {print substr($0, index($0,$3)); exit}' | \
        _escape_special_characters)"
    if [ -z "${_stxt2html__title}" ]; then
        _verbose "txt2html: no title was found, skipping..."
    else
        _stxt2html__report_html_content="$(printf "%s" "${_stxt2html__report_html_content}" | \
            sed "s/STATICUS_TITLE/${_stxt2html__title}/g")"
    fi

    #status section
    _stxt2html__status="$(printf "%s" "${_stxt2html__report_txt_content}" | \
        awk '/^## status:/ {print substr($0, index($0,$3)); exit}' | \
        _escape_special_characters)"
    _stxt2html__status_description="$(printf "%s" "${_stxt2html__report_txt_content}" | \
        awk '/^## status:/ {getline;print;exit}' | _escape_special_characters)"
    if [ -z "${_stxt2html__status}" ]; then
        _verbose "txt2html: no status was found, skipping..."
    else
        case "${_stxt2html__status}" in
            ok) _stxt2html__report_html_content="$(printf "%s" \
                  "${_stxt2html__report_html_content}" | \
                   sed "s/STATICUS_EVERYTHING_OK/${_stxt2html__status_description}/g")" ;;
            error) _stxt2html__report_html_content="$(printf "%s" \
                   "${_stxt2html__report_html_content}"   | \
                   sed "s/STATICUS_FAILED_MODULES/${_stxt2html__status_description}/g")";;
        esac
    fi

    #notification section
    _stxt2html__notification="$(printf "%s" "${_stxt2html__report_txt_content}" | \
        awk '/^### notification:/ {print substr($0, index($0,$3)); exit}' | \
        _escape_special_characters)"
    _stxt2html__notification_description="$(printf "%s" "${_stxt2html__report_txt_content}" | \
        sed '1,/^### notification/d;/####/,$d' | sed '/^\s*$/d' | \
        _escape_special_characters)"
    if [ -z "${_stxt2html__notification}" ]; then
        _verbose "txt2html: no notification was found, skipping..."
    else
        _stxt2html__report_html_content="$(printf "%s" \
            "${_stxt2html__report_html_content}" | \
            sed "s/STATICUS_NOTIFICATION/${_stxt2html__notification_description}/g")"
    fi

    #modules section
    _stxt2html__modules="$(printf "%s" "${_stxt2html__report_txt_content}" | awk '/^#### /')"
    if [ -z "${_stxt2html__modules}" ]; then
        _verbose "txt2html: no modules were found, skipping..."
    else
        _stxt2html__report_html_content="$(printf "%s" \
            "${_stxt2html__report_html_content}" | sed 's/STATICUS_MODULE_PLACEHOLDER//g')"
        OLDIFS="${IFS}"; IFS='
';          for _stxt2html__module in ${_stxt2html__modules}; do
            _stxt2html__module_status="${_stxt2html__module##*:}"
            _stxt2html__module_status="${_stxt2html__module##* }"
            _stxt2html__module_escaped="$(printf "%s" "${_stxt2html__module}" | \
                _escape_special_characters)"
            _stxt2html__module_description="$(printf "%s" \
                "${_stxt2html__report_txt_content}"    |  \
                sed '1,/^'"${_stxt2html__module_escaped}"'/d;/####/,$d' | sed '/^\s*$/d')"
            _stxt2html__module="$(printf "%s" "${_stxt2html__module}" | \
                awk -F: '{gsub("^#### ","");print $1}' |  \
                awk -F "" '{$1=toupper($1)}1' OFS=)"

            #special info formatting
            if [ "${_stxt2html__module}" = "Info" ]; then
              _stxt2html__report_html_content="$(printf "%s" \
              "${_stxt2html__report_html_content}" | sed 's/STATICUS_INFO_PLACEHOLDER//g')"
              for _stxt2html__module_description_line in ${_stxt2html__module_description}; do
                  _stxt2html__module_description_line="${_stxt2html__module_description_line#* }"
                  _stxt2html__module_info_cmd="${_stxt2html__module_description_line%% *}"
                  _stxt2html__module_info_description="${_stxt2html__module_description_line#* }"

                  _stxt2html__report_html_content="$(printf "%s" \
                      "${_stxt2html__report_html_content}"   |   \
                      awk '/STATICUS_INFO_DESCRIPTION/ {print;print;next}; 1')"

                  _stxt2html__report_html_content="$(printf "%s" \
                      "${_stxt2html__report_html_content}"   |   \
                      awk -v cmd="${_stxt2html__module_info_cmd}"\
                      -v description="${_stxt2html__module_info_description}" \
                      '/STATICUS_INFO_DESCRIPTION/ && !seen {
                      gsub(/STATICUS_INFO_CMD/, cmd);
                      gsub(/STATICUS_INFO_DESCRIPTION/, description);seen=1;print;next}; 1')"
              done
            else
                _stxt2html__report_html_content="$(printf "%s" \
                    "${_stxt2html__report_html_content}"   |   \
                    awk '/module '"${_stxt2html__module_status}"'.*STATICUS_MODULE_DESCRIPTION/ {
                    print;print;next}; 1')"
                _stxt2html__report_html_content="$(printf "%s" \
                    "${_stxt2html__report_html_content}"   |   \
                    awk -v module="${_stxt2html__module}"      \
                    -v description="${_stxt2html__module_description}" \
                    '/module '"${_stxt2html__module_status}"'.*STATICUS_MODULE_DESCRIPTION/ && !seen {
                    gsub(/STATICUS_MODULE_NAME/, module);
                    gsub(/STATICUS_MODULE_DESCRIPTION/, description);seen=1;print;next}; 1')"
            fi
        done; IFS="${OLDIFS}"
    fi

    #contacts section
    if [ -z "${notify_contacts}" ]; then
        _verbose "txt2html: no contacts were found, skipping..."
    else
        _stxt2html__report_html_content="$(printf "%s" \
            "${_stxt2html__report_html_content}" | sed 's/STATICUS_CONTACT_PLACEHOLDER//g')"
        for _stxt2html__contact in ${notify_contacts}; do
            _stxt2html__report_html_content="$(printf "%s" \
                "${_stxt2html__report_html_content}"   |   \
                awk '/mailto:STATICUS_CONTACT/ {print;print;next}; 1')"
            _stxt2html__report_html_content="$(printf "%s" \
                "${_stxt2html__report_html_content}"   |   \
                awk -v contact="${_stxt2html__contact}"    \
                '/mailto:STATICUS_CONTACT/ && !seen {
                gsub(/STATICUS_CONTACT/, contact);seen=1;print;next}; 1')"
        done
    fi

    #cleanup not used placeholders
    _stxt2html__report_html_content="$(printf "%s" "${_stxt2html__report_html_content}" | \
        sed '/STATICUS_/d')"
    #update IDs
    _stxt2html__report_html_content="$(printf "%s" "${_stxt2html__report_html_content}" | \
        awk '/ID_/ {counter++; gsub(/ID_./, "ID_" counter ); print;next}; 1')"
    #write final html report
    printf "%s" "${_stxt2html__report_html_content}" > "${_stxt2html__report_html}"
}

_staticus() {
    _staticus_report_title "Staticus - $(hostname -f) $(date "${date_format}")"
    OLDIFS="${IFS}"
    IFS=","; for module in $(_str2lower "${modules}"); do
        case "${module}" in
            notification) _module_"${module}" "${module_notification_msg}" ;;
            memory)  _module_"${module}" "${module_memory_threshold}" ;;
            swap)    _module_"${module}" "${module_swap_threshold}"   ;;
            load)    _module_"${module}" "${module_load_threshold}"   ;;
            storage) _module_"${module}" "${module_storage_threshold}" "${module_storage_partitions}" ;;
            process) _module_"${module}" "${module_process_list}"     ;;
            info)    _module_"${module}" ;;
            *) printf "%s\\n" "module ${module} doesn't exists, skipping..." >&2 ;;
        esac
    done; IFS="${OLDIFS}"
    _staticus_report_general_status "${failed_modules:-0}"         || return 1
    _staticus_txt2html "${report_txt}" "${report_html}" "${theme}" || return 1
    return "${failed_modules:-0}"
}

progname="$(_basename "${0}")"

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add to the end of $@
    set -- "${@}" $(cat)
fi

for arg; do #parse options
    case "${arg}" in
        -h|--help) _usage && exit  ;;
        -v|--verbose) verbose="on"; shift ;;
        '-c'|'--config'|-c*|--config*)
            case "${arg}" in
                '-c'|'--config')
                    if [ "${#}" -gt "1" ]; then
                        case "${2}" in
                            -*) _die "Option '${arg}' requires a parameter" ;;
                        esac
                        shift; user_config_file="${1}"; [ "${1}" ] && shift
                    else
                        _die "Option '${arg}' requires a parameter"
                    fi
                    ;;
                -c*) user_config_file="${1#-c}"; shift ;;
                --config*) user_config_file="${1#--config}"; shift ;;
            esac
            if [ -r "${user_config_file}" ]; then
               [ -f "${user_config_file}" ] && config_file="${user_config_file}" || \
                    _die "Specified config file '${user_config_file}' doesn't exists"
            else
                _die "Specified config file '${user_config_file}' isn't readable"
            fi
            ;;
        '-m'|'--modules'|-m*|--modules*)
            case "${arg}" in
                '-m'|'--modules')
                    if [ "${#}" -gt "1" ]; then
                        case "${2}" in
                            -*) _die "Option '${arg}' requires a parameter" ;;
                        esac
                        shift; user_modules="${1}"; [ "${1}" ] && shift
                    else
                        _die "Option '${arg}' requires a parameter"
                    fi
                    ;;
                -m*) user_modules="${1#-m}"; shift ;;
                --modules*) user_modules="${1#--modules}"; shift ;;
            esac
            case "${user_modules}" in
                all) : ;;
                *) modules="${user_modules}"
            esac
            ;;
        '-o'|'--output-html'|-o*|--output-html*)
            case "${arg}" in
                '-o'|'--output-html')
                    if [ "${#}" -gt "1" ]; then
                        case "${2}" in
                            -*) _die "Option '${arg}' requires a parameter" ;;
                        esac
                        shift; user_page_html="${1}"; [ "${1}" ] && shift
                    else
                        _die "Option '${arg}' requires a parameter"
                    fi
                    ;;
                -o*) user_page_html="${1#-o}"; shift ;;
                --output-html*) user_page_html="${1#--output-html}"; shift ;;
            esac
            touch "${user_page_html}" >/dev/null 2>&1 || _die "Unable to create '${user_page_html}' output file"
            [ -w "${user_page_html}" ] && rm -rf "${user_page_html}" || \
                _die "Unable to write to '${user_page_html}' output file"
            report_html="${user_page_html}"
            ;;
        '-O'|'--output-txt'|-O*|--output-txt*)
            case "${arg}" in
                '-O'|'--output-txt')
                    if [ "${#}" -gt "1" ]; then
                        case "${2}" in
                            -*) _die "Option '${arg}' requires a parameter" ;;
                        esac
                        shift; user_page_txt="${1}"; [ "${1}" ] && shift
                    else
                        _die "Option '${arg}' requires a parameter"
                    fi
                    ;;
                -O*) user_page_txt="${1#-O}"; shift ;;
                --output-txt*) user_page_txt="${1#--output-txt}"; shift ;;
            esac
            touch "${user_page_txt}" >/dev/null 2>&1 || _die "Unable to create '${user_page_txt}' output file"
            [ -w "${user_page_txt}" ] && rm -rf "${user_page_txt}" || \
                _die "Unable to write to '${user_page_txt}' output file"
            report_txt="${user_page_txt}"
            ;;
        --txt2html|--txt2html*)
            case "${arg}" in
                '--txt2html')
                    if [ "${#}" -gt "1" ]; then
                        case "${2}" in
                            -*) _die "Option '${arg}' requires a parameter" ;;
                        esac
                        shift; user_txt2html="${1}"; [ "${1}" ] && shift
                    else
                        _die "Option '${arg}' requires a parameter"
                    fi
                    ;;
                --txt2html*) user_txt2html="${1#--txt2html}"; shift ;;
            esac
            if [ -r "${user_txt2html}" ]; then
               [ -f "${user_txt2html}" ] && report_txt="${user_txt2html}" || \
                    _die "Specified ${progname} file '${user_txt2html}' doesn't exists"
            else
                _die "Specified ${progname} file '${user_config_file}' isn't readable"
            fi
            ;;
        --theme|--theme*)
            case "${arg}" in
                '--theme')
                    if [ "${#}" -gt "1" ]; then
                        case "${2}" in
                            -*) _die "Option '${arg}' requires a parameter" ;;
                        esac
                        shift; user_theme="${1}"; [ "${1}" ] && shift
                    else
                        _die "Option '${arg}' requires a parameter"
                    fi
                    ;;
                --theme*) user_theme="${1#--theme}"; shift ;;
            esac
            if [ -z "$(printf "%s\\n" "${themes}" | tr ' ' '\n' | awk "/^$user_theme\$/")" ]; then
                printf "%s\\n" "${progname}: '${user_theme}' is not a recognized theme, using default ..." >&2
            fi
            ;;
        --list-modules) printf "%s\\n" "${modules}" | tr ',' '\n'; exit 0; ;;
        --list-themes)  printf "%s\\n" "${themes}"  | tr ',' '\n'; exit 0; ;;
        -*) _die "${progname}: unrecognized option '${arg}'" ;;
    esac
done

_loadconf "${config_file}"
if [ -z "${user_txt2html}" ]; then
    _staticus
else
    _staticus_txt2html "${report_txt}" "${report_html}" "${theme}"
fi

# vim: set ts=4 sw=4 tw=0 ft=sh :
