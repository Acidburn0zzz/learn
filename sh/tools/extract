#!/bin/sh
#description: decompress files
#usage: extract file.format

#example: extract files.tar.gz
#file1
#file2
#...

#http://bashscripts.org/forum/viewtopic.php?f=7&t=367
_usage()
{
    printf "%s\\n" "Usage: $(expr "${0}" : '.*/\([^/]*\)') [options] files ..." >&2
    printf "%s\\n" "Extract files." >&2
    printf "\\n" >&2
    printf "%s\\n" "  -s           quiet mode" >&2
    printf "%s\\n" "  -h, --help   show this help message and exit" >&2
    exit 1
}

_exec()
{
    _exec__status="${?}"
    [ X"${_exec__status}" != X"0" ] && exit "${_exec__status}"
    printf "%s " "[+] ${@}"
    printf "\\n"
    eval "${@}"
}

_extract()
{
    for _extract__file; do
        if [ -z "${SFLAG}" ]; then
            if [ -f "${_extract__file}" ] ; then
                case "${_extract__file}" in
                    *.deb|*.udeb)           _exec "ar xv '${_extract__file}'"                   ;;
                    *.tar.lrz|*.tlrz|*.tlz) _exec "lrzcat < '${_extract__file}' | tar xvf -"    ;;
                    *.tar.bz2|*.tbz|*.tbz2) _exec "bzcat < '${_extract__file}' | tar xvf -"     ;;
                    *.tar.gz|*.tgz)         _exec "zcat < '${_extract__file}' | tar xvf -"      ;;
                    *.tar.lzma)             _exec "lzcat < '${_extract__file}' | tar xvf -"     ;;
                    *.tar.xz)               _exec "xzcat < '${_extract__file}' | tar xvf -"     ;;
                    *.bz2)                  _exec "bunzip2 -v '${_extract__file}'"              ;;
                    *.rar)                  _exec "rar x '${_extract__file}'"                   ;;
                    *.gz)                   _exec "gunzip -v '${_extract__file}'"               ;;
                    *.tar)                  _exec "tar xvf '${_extract__file}'"                 ;;
                    *.zip|*.xpi)            _exec "unzip '${_extract__file}'"                   ;;
                    *.7z)                   _exec "7z x '${_extract__file}'"                    ;;
                    *.jar)                  _exec "jar xvf '${_extract__file}'"                 ;;
                    *.iso)                  _exec "7z x '${_extract__file}'"                    ;;
                    *)  printf "%s\\n" "'${_extract__file}' is not a valid compressed file" >&2 ;;
                esac
            else
                printf "%s\\n" "$(expr "${0}" : '.*/\([^/]*\)'): '${_extract__file}' does not exist or is not readable" >&2
            fi
        else
            if [ -f "${_extract__file}" ] ; then
                case "${_extract__file}" in
                    *.deb|*.udeb)           _exec "ar x '${_extract__file}'"                   ;;
                    *.tar.lrz|*.tlrz|*.tlz) _exec "lrzcat -q < '${_extract__file}' | tar xf -" ;;
                    *.tar.bz2|*.tbz|*.tbz2) _exec "bzcat < '${_extract__file}' | tar xf -"     ;;
                    *.tar.gz|*.tgz)         _exec "zcat < '${_extract__file}' | tar xf -"      ;;
                    *.tar.lzma)             _exec "lzcat < '${_extract__file}' | tar xf -"     ;;
                    *.tar.xz)               _exec "xzcat < '${_extract__file}' | tar xf -"     ;;
                    *.bz2)                  _exec "bzip2 '${_extract__file}'"                  ;;
                    *.rar)                  _exec "rar x '${_extract__file}'"                  ;;
                    *.gz)                   _exec "gunzip '${_extract__file}'"                 ;;
                    *.tar)                  _exec "tar xf '${_extract__file}'"                 ;;
                    *.zip|*.xpi)            _exec "unzip '${_extract__file}'"                  ;;
                    *.7z)                   _exec "7z x '${_extract__file}'"                   ;;
                    *.jar)                  _exec "jar xf '${_extract__file}'"                 ;;
                    *.iso)                  _exec "7z x '${_extract__file}'"                   ;;
                    *) printf "%s\\n" "'${_extract__file}' is not a valid compressed file" >&2 ;;
                esac
            else
                printf "%s\\n" "$(expr "${0}"): '${_extract__file}' does not exist or is not readable" >&2
            fi
        fi
    done
}

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add to the end of $@
    set -- "${@}" $(cat)
fi

[ "${#}" -eq "0" ] && _usage

for arg; do #parse options
    case "${arg}" in
        --) shift; break   ;;
        -h|--help) _usage  ;;
        -s) SFLAG="true" && shift
            if [ -z "${1}" ]; then
                _usage
            else
                _extract "${@}"
                exit 0
            fi ;;
        -*) printf "%s\\n" "$(expr "${0}" : '.*/\([^/]*\)'): unrecognized option \`${arg}'" >&2; _usage ;;
    esac
done

_extract "${@}"
