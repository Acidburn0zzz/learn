#############################################################################
#!/usr/bin/env bash
#############################################################################

tmp_path="/tmp/fix_dependencies"
function rotate ()
{
    pid=$1
    animation_state=1

    while [ "`ps -p $pid -o comm=`" ]; do
                # rotating star
                echo -e -n "\b\b\b"
                case $animation_state in
                    1)
                        echo -n "["
                        echo -n -e "\033[1m|\033[0m"
                        echo -n "]"
                        animation_state=2
                        ;;
                    2)
                        echo -n "["
                        echo -n -e "\033[1m/\033[0m"
                        echo -n "]"
                        animation_state=3
                        ;;
                    3)
                        echo -n "["
                        echo -n -e "\033[1m-\033[0m"
                        echo -n "]"
                        animation_state=4
                        ;;
                    4)
                        echo -n "["
                        echo -n -e "\033[1m"
                        echo -n "\\"
                        echo -n -e "\033[0m"
                        echo -n "]"
                        animation_state=1
                        ;;
                esac
    sleep 1
done
}

function test_root()
{
    if [ ! "$LOGNAME" == "root" ]; then
        echo "- detecting user $LOGNAME (non-root)"
        echo "- checking if sudo is available ... "
        sudotest=`type sudo &>/dev/null ; echo $?`

        if [ "$sudotest" == 0 ]; then
            sudo -K
            if [ -e "$tmp_path/sudo.test" ]; then
                rm -f "$tmp_path/sudo.test"
            fi
            while [ -z "$sudopwd" ]; do
                echo -n "   - enter sudo-password: "
                stty -echo
                read sudopwd
                stty echo

                # password check
                echo "$sudopwd" | sudo -S touch "$tmp_path/sudo.test" &>/dev/null
                if [ ! -e "$tmp_path/sudo.test" ]; then
                    sudopwd=""
                fi
            done
            rm -f "$tmp_path/sudo.test"
            echo 
            return 1
        else
            error "You're not root and sudo isn't available. Please run this script as root!"
            return 0
        fi
    fi
    return 1
}

detect_distro() #add missing
{
  #DIST_INFO="/etc/lsb-release"
  #if [ -r $DIST_INFO ]; then
    #. $DIST_INFO
  #fi

  if [ -z $DISTRIB_ID ]; then
    if [ -f /etc/arch-release ]; then
      DISTRIB_ID="Arch"
      PACKAGER_INSTALL="pacman -S "
    elif [ -r /etc/knoppix-version ]; then
      DISTRIB_ID="Knoppix"
    elif [ -r /etc/sidux-version ]; then
      DISTRIB_ID="Sidux"
    elif [ -r /etc/debian_version ]; then
      DISTRIB_ID="Debian"
      PACKAGER_INSTALL="apt-get install -y "
    elif [ -r /etc/issue ]; then
      DISTRIB_ID=$(cat /etc/issue.net | awk '{print $1}')
      if [ "$DISTRIB_ID" == Ubuntu ]; then
          DISTRIB_ID=Ubuntu
          PACKAGER_INSTALL="apt-get install -y "
      fi
    elif [ -r /etc/gentoo-release ]; then
      DISTRIB_ID="Gentoo"
      PACKAGER_INSTALL="emerge"
    elif [ -f /etc/lfs-version ]; then
      DISTRIB_ID="LFS"
    elif [ -r /etc/pclinuxos-release ]; then
      DISTRIB_ID="PCLinuxOS"
    elif [ -f /etc/mandriva-release ] || [ -f /etc/mandrake-release ]; then
      DISTRIB_ID="Mandriva"
    elif [ -f /etc/redhat-release ]; then
      DISTRIB_ID="RedHat"
      DISTRIB_ID="yum install -y "
    elif [ -f /etc/fedora-release ]; then
      DISTRIB_ID="Fedora"
      DISTRIB_ID="yum install -y "
    elif [ -r /etc/vector-version ]; then
      DISTRIB_ID="VectorLinux"
    elif [ -r /etc/slackware-version ]; then
      DISTRIB_ID="$(cat /etc/slackware-version)"
    elif [ -f /etc/release ]; then
      DISTRIB_ID="Solaris"
    elif [ -r /etc/SuSE-release ]; then
      DISTRIB_ID="$(grep -i suse /etc/SuSE-release)"
      PACKAGER_INSTALL="zypper in "
    elif [ -f /etc/yellowdog-release ]; then
      DISTRIB_ID="YellowDog Linux"
    elif [ -f /etc/zenwalk-version  ]; then
      DISTRIB_ID="Zenwalk"
    else
      DISTRIB_ID="Unknown"
    fi
  fi
}

function cleanup ()
{
    stty echo
    rm -rf $tmp_path 2>/dev/null
    if [ -z $1 ]; then
        exit
    fi
}

mkdir -p "$tmp_path"		2>/dev/null
detect_distro
clear
echo -e "\033[1m-----------------------------\033[7m Fixing dependencies \033[0m\033[1m------------------------------\033[0m"

trap cleanup SIGINT SIGTERM #trap ctrl-c

echo "- looking for header files ... "
if [ ! -f /usr/include/X11/Xlib.h -o ! -f /usr/bin/wget ]; then
    echo -n "   - header files wasn't found in your system, want to install them? (y/n): "
    read ANSWER
    if [ $ANSWER == "y" ]; then

        test_root
        rooted=$?

        if [ ! "$rooted" == "1" ]; then
            echo "You're not root and sudo isn't available. Please run this script as root!"
            exit
        fi
        echo "      - installing x11 headers ...   "

        if [ -f /usr/bin/sudo ]; then
            SUDO="/usr/bin/sudo -S"
        else
            SUDO=""
        fi

        if [ "$DISTRIB_ID" == Ubuntu -o "$DISTRIB_ID" == Debian ]; then
            echo "$sudopwd" | $SUDO  $PACKAGER_INSTALL xorg-dev xserver-xorg-dev wget #> /dev/null 2>&1
        elif [ "$DISTRIB_ID" == Fedora ]; then
            echo "$sudopwd" | $SUDO  $PACKAGER_INSTALL libX11-devel xorg-x11-server-devel wget
        fi
    else
        exit
    fi
fi
echo -e "\033[1m--------------------------------------------------------------------------------\033[0m"

##########################################################################################################
echo -n "- downloading GraphApp (widgets) ...    "
wget -N http://enchantia.com/software/graphapp/download/GraphApp_3.64.tar.gz > /dev/null 2>&1 &
running=$(pidof wget); running=$?

if [ "$running" == "1" ]; then
    echo -e "\b\b\b ok "
else
    rotate $(pidof wget)
    echo -e "\b\b\b done "
fi
##########################################################################################################
echo -n "- uncomprensing GraphApp ...    "
tar zxf GraphApp_3.64.tar.gz > /dev/null 2>&1 &
running=$(pidof tar); running=$?

if [ "$running" == "1" ]; then
    echo -e "\b\b\b ok "
else
    rotate $(pidof tar)
    echo -e "\b\b\b done "
fi
echo -n "- configuring ... "
cd GraphApp_3.64/src
./configure /usr/lib/x86_64-linux-gnu/
echo -n "- compiling ... "

##########################################################################################################

cleanup 1
echo -e "\n\033[1m--------------------------------------------------------------------------------\033[0m"
echo "Now run \$ make"
echo -e "\033[1m--------------------------------------------------------------------------------\033[0m"
