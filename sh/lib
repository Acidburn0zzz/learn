#!/usr/bin/env bash
#functions, copy and paste them in your own scripts

#https://github.com/chilicuil/learn/blob/master/sh/lib
#if you have more or can improve the current ones please send your push request!

#new functions:
#[+] must be self contained, with no dependencies on other functions
#[+] can depend on exotic cli commands or be bash specific (portability is a plus)
#[+] must follow general style (name convention, return comment, indentation, etc)
#[+] must not print errors
#[+] must provide an example

_arch()
{   #check for system arch, returns [64|32]
    local arch
    [ -z $MACHTYPE ] && arch=$(uname -m) || arch=$(echo $MACHTYPE | cut -d- -f1)

    case $arch in
        x86_64)
            arch=64;
            ;;
        i686)
            arch=32;
            ;;
        *)
            exit 1
            ;;
    esac

    echo $arch
}
#==================================================== Example ====
#arch=$(_arch)
#[ $arch -eq 32 ] && command32 || command64
#=================================================================

_barcui()
{
    [ -z $1 ] && return 1
    pid=$1
    animation_state=1
    printf "%s" " "

    local c=0; j=0;
    
    exec < /dev/tty
    oldstty=$(stty -g)
    stty raw -echo min 0
    echo -en "\033[6n" > /dev/tty
    IFS=';' read -r -d R -a pos
    stty $oldstty
    local col=$((${pos[1]} - 1))
    col=$((col+4))

    while [ "`ps -p $pid -o comm=`" ]; do
        case $animation_state in
            1)
                printf "%s" "o@o"
                animation_state=2
                ;;
            2)
                if (( j < $(tput cols)-col )); then
                    for (( i = 0; i < c+4; i++ )); do
                        printf "%b" "\b";
                    done
                    printf "%*s%s" $((c+1)) "" "o @o"
                    (( j=j+1 ))
                    (( c=c+1 ))
                    if ! (( j < $(tput cols)-col )); then
                        animation_state=3
                    fi
                fi
                ;;
            3)
                for (( i = 0; i < c+3; i++ )); do
                    printf "%b" "\b";
                done
                printf "%*s%s" $((c)) "" "o@o "
                animation_state=4
                ;;
            4)
                for (( i = 0; i < c+4; i++ )); do
                    printf "%b" "\b";
                done
                printf "%*s%s" $((c)) "" "o@o?"
                animation_state=5
                ;;
            5)
                for (( i = 0; i < c+4; i++ )); do
                    printf "%b" "\b";
                done
                printf "%*s%s" $((c)) "" "o@o "
                animation_state=6
                ;;
            6)
                if (( j > 0 )); then
                    for (( i = 0; i < c+4; i++ )); do
                        printf "%b" "\b";
                    done
                    #set -x
                    printf "%*s%s" $((c-1)) "" "o@ o"
                    printf "%*s" 1 ""
                    printf "%b" "\b";
                    #set +x

                    (( j=j-1 ))
                    (( c=c-1 ))
                else
                    for (( i = 0; i < 4; i++ )); do
                        printf "%b" "\b";
                    done
                    printf "%4s" ""
                    for (( i = 0; i < 4; i++ )); do
                        printf "%b" "\b";
                    done
                    printf "%s" "o@o"
                    animation_state=2
                fi
                ;;
        esac
        sleep 1
    done
}
#==================================================== Example ====
#echo -n "[+] tar is running ..." && _barcui $(pidof tar)
#=================================================================

_internetlink()
{   #check for internet connection, returns 0 on success, 1 otherwise
    wget --tries=3 --timeout=5 http://www.google.com -O /tmp/index.google > /dev/null 2>&1

    if [ -s /tmp/index.google ]; then
        rm /tmp/index.google
        return 0
    else
        rm /tmp/index.google
        return 1
    fi
}
#==================================================== Example ====
#if ! _internetlink; then
    #echo "You must be connected to run this script" >&2
    #exit 1
#fi
#=================================================================

_cleanup()
{   #clean tmp files, exits with no parameters
    stty echo
    echo
    echo "[+] cleanup ..."
    your_commands_here

    [ -z $1 ] && exit
}
#==================================================== Example ====
#trap _cleanup SIGINT SIGTERM #trap ctrl-c
#_cleanup 1
#=================================================================

_cmd()
{   #print current command, exits on fail
    [ -z $1 ] && return 0

    echo "[+] $@"
    $@

    status=$?
    [ $status != 0 ] && exit $status || return
}
#==================================================== Example ====
#_cmd rm file
#=================================================================

_die()
{   #print a stacktrace with a msg, exits with 1
    local frame=0
    while caller $frame; do
        $((frame=frame+1));
    done

    echo "$*"
    exit 1
}
#==================================================== Example ====
#[ -z "$var" ] && _die "error msg"
#=================================================================

_dirname()
{   #returns string on success, 1 on fail

    #http://www.linuxmisc.com/12-unix-web-servers/d31beb238f7b5a6b.htm
    if [ -z $1 ]; then
        return 1;
    else
        local dir="${1%${1##*/}}"
        [ "${dir:=./}" != "/" ] && dir="${dir%?}"
        echo "$dir"
    fi
}
#==================================================== Example ====
#_dirname /path/file #returns /path
#=================================================================

_download()
{   #download files, return local location, 1 on fail
    #requires, liburi-perl, aria2c

    local urll="$1"
    local prot=$(echo "$urll" | cut -d: -f1)
    if [ "$prot" = magnet ]; then
        return 1 #not supported   
    fi
    local path=$( echo "$urll" | perl -MURI -le 'chomp($urll = <>); print URI->new($urll)->path' )
    local fn=$(basename "$path")
    local ext="${fn##*.}"    

    if [ "$ext" = torrent ]; then
        local file=$(aria2c -q --bt-stop-timeout=120 --seed-time=0 --follow-torrent=mem --on-bt-download-complete /bin/echo "$urll")
        [ -z $file ] && return 1  
        return ${file[2]}
    fi

    case "$ext" in
        mp4|ogv|mpg|flv|avi|mkv|mov|wmv|webm|3gpp)
            local file=$(aria2c -q --bt-stop-timeout=120 --seed-time=0 --follow-torrent=mem --on-download-complete /bin/echo "$urll")
            [ -z $file ] && return 1  
            return ${file[2]}         
            ;;
        *)
            return 1
            ;;
    esac
}
#==================================================== Example ====
#FILE=$(_download $URL)
#[ "$FILE" -eq 1 ] && echo error || echo "done: $FILE"
#=================================================================

_fullpath()
{   #return full path of the argument, return string on success, 1 on fail
    if [ -z $1 ]; then
        return 1;
    else
        if [ `expr substr ${1:-a} 1 2` != "/" ]; then
            full_file=`pwd`"/"$1
        fi
    fi
    echo $full_file
}
#==================================================== Example ====
#_fullpath file #returns /path/file
#=================================================================

_getopt()
{   #define vars for cli arguments
    var=""
    wantarg=0
    for $(( i=1; i<=$#; i+=1 )); do
        lastvar=$var
        var=${!i}
        if [ "$var" = "" ]; then 
            continue 
        fi
        echo \ $var | grep -q -- '='
        if [ $? -eq 0 ]; then
            ## -*param=value
            var=$(echo \ $var | sed -r s/'^[ ]*-*'/''/)
            myvar=${var%=*}
            myval=${var#*=}
            eval "${myvar}"="'$myval'"
        else
            echo \ $var | grep -E -q -- '^[ ]*-'
            if [ $? -eq 0 ]; then
                ## -*param$
                var=$(echo \ $var | sed -r s/'^[ ]*-*'/''/)
                eval "${var}"=1
                wantarg=1
            else
                echo \ $var | grep -E -- '^[ ]*-'
                if [ $? -eq 0 ]; then
                    # the current one has a dash, so cannot be
                    # the argument to the last parameter
                    wantarg=0
                fi
                if [ $wantarg -eq 1 ]; then
                    # parameter argument
                    val=$var
                    var=$lastvar
                    eval "${var}"="'${val}'"
                    wantarg=0
                else
                    # parameter
                    if [ "${!var}" = "" ]; then
                        eval "${var}"=1
                    fi
                    wantarg=0
                fi
            fi
        fi
    done
}
#==================================================== Example ====
#OIFS=$IFS; IFS=$(echo -e "\n"); _getopt $@; IFS=$OIFS
##./getopts --foo=bar -v -n 10 blah -one='last arg' 
#echo -e " foo:\t$foo v:\t$v n:\t$n blah:\t$blah one:\t$one "
#=================================================================

_getcol()
{   #return an int with the col cursor position

    #http://stackoverflow.com/questions/2575037/how-to-get-the-cursor-position-in-bash
    exec < /dev/tty
    oldstty=$(stty -g)
    stty raw -echo min 0
    # on my system, the following line can be replaced by the line below it
    echo -en "\033[6n" > /dev/tty
    # tput u7 > /dev/tty    # when TERM=xterm (and relatives)
    IFS=';' read -r -d R -a pos
    stty $oldstty
    # change from one-based to zero based so they work with: tput cup $row $col
    local col=$((${pos[1]} - 1))
    echo $col
}
#==================================================== Example ====
printf "%s" "Hi"
col=$(_getcol)
printf "%s" " - $col characters"
#=================================================================

_getrow()
{   #return an int with the col cursor position

    #http://stackoverflow.com/questions/2575037/how-to-get-the-cursor-position-in-bash
    exec < /dev/tty
    oldstty=$(stty -g)
    stty raw -echo min 0
    # on my system, the following line can be replaced by the line below it
    echo -en "\033[6n" > /dev/tty
    # tput u7 > /dev/tty    # when TERM=xterm (and relatives)
    IFS=';' read -r -d R -a pos
    stty $oldstty
    # change from one-based to zero based so they work with: tput cup $row $col
    local row=$((${pos[0]:2} - 1))    # strip off the esc-[
    echo $row
}
#==================================================== Example ====
row=$(_getrow)
printf "%s" "$row"
#=================================================================

_getpasswd()
{   #define vars as passwords
    if [ -n "$1" ]
    then
        local option=`tr '[:upper:]' '[:lower:]' <<< $1`
        echo -n "Enter your $option password: "
        stty -echo
        read ${option}passwd
        stty echo
        echo
    else
        echo -n "Enter your password: "
        stty -echo
        read passwd
        stty echo
        echo
    fi
}
#==================================================== Example ====
#_getpasswd
#echo $passwd
#_getpasswd config
#echo $configpasswd
#=================================================================

_getroot()
{   #get sudo's password, define $sudopasswd and $sudocmd

    local tmp_path="/tmp"; local sudotest; local insudoers;

    if [ ! "$LOGNAME" = root ]; then
        echo "Detecting user $LOGNAME (non-root) ..."
        echo "Checking if sudo is available ..."
        sudotest=`type sudo &>/dev/null ; echo $?`

        if [ "$sudotest" = 0 ]; then
            sudo -K
            if [ -e "$tmp_path/sudo.test" ]; then
                rm -f "$tmp_path/sudo.test"
            fi
            while [ -z "$sudopwd" ]; do
                echo -n "   - enter sudo-password: "
                stty -echo
                read sudopwd
                stty echo

                # password check
                echo "$sudopwd" | sudo -S touch "$tmp_path/sudo.test" > "$tmp_path/sudo.output" 2>&1
                insudoers=$(grep -i "sudoers" "$tmp_path/sudo.output")
                if [ -n "$insudoers" ]; then
                    echo "$sudopwd" | sudo -S rm "$tmp_path/sudo.output" > /dev/null 2>&1
                    exit
                fi

                if [ ! -e "$tmp_path/sudo.test" ]; then
                    sudopwd=""
                fi
            done

            sudocmd="/usr/bin/sudo -S"

            echo "$sudopwd" | $sudocmd rm -f "$tmp_path/sudo.test" > /dev/null 2>&1
            echo
        else
            echo "You're not root and sudo isn't available. Please run this script as root!"
            exit
        fi
    fi
}
#==================================================== Example ====
#_getroot
#echo "$sudopwd" | $sudocmd rm file
#=================================================================

_isalphanum()
{ #check for alphanum strings, return 0 if all upper+lower+digits, 1 otherwise

  # Remove all unacceptable chars
  compressed="$(echo $1 | sed -e 's/[^[:alnum:]]//g')"

  [ "$compressed" != "$input" ] && return 1 || return 0
}
#==================================================== Example ====
#echo -n "Enter input: "
#read input
#if ! _isalphanum "$input" ; then
    #echo "Your input must consist of only letters and numbers." >&2
    #exit 1
#else
    #echo "Input is valid."
#fi
#exit 0
#=================================================================

_islivecd()
{   #detect a livecd system, return 0 on success, 1 otherwise
    grep -qs boot=live /proc/cmdline && return 0
    grep -qs boot=casper /proc/cmdline && return 0
    return 1
}
#==================================================== Example ====
#if _islivecd ; then
    #echo "Live cd detected"
#else
    #echo "Non LiveCd detected"
#fi
#=================================================================

_inarray()
{   #look for a value in an array, returns 0 on success, 1 otherwise
    [ -z $1 ] && return 1

    local needle="$1" element
    shift
    for element
    do
        [ "$element" != "$needle" ] || return 0
    done
    return 1
}
#==================================================== Example ====
#_inarray $name ${names[@]} && echo found!
#=================================================================

_isnum()
{   #look for a number, returns 0 on success, 1 otherwise
    echo "$@" | grep -q -v "[^0-9]"
}
#==================================================== Example ====
#echo -n "Enter input: "
#read input
#if ! _isnum "$input" ; then
    #echo "Your input must consist of only numbers." >&2
    #exit 1
#else
    #echo "Input is valid."
#fi
#exit 0
#=================================================================

_lower()
{   #convert a string to lower string
    [ -z $1 ] && return 1
    echo $@ | tr '[:upper:]' '[:lower:]' 
}
#==================================================== Example ====
#string="FOO BAR"
#lower=$(_lower $string)
#=================================================================

_mail()
{   #send mail, return 0 on success, 1 otherwise
    #requires: libio-socket-ssl-perl, libnet-ssleay-perl and sendemail
    case $1 in
        gmail)
            sendemail -f "$1" -t "$2" -u "$3" -m "$4" -s smtp.gmail.com:587 -o tls=yes -xu "$5" -xp "$6" > /dev/null 2>&1
            ;;
        *)
            sendemail -f "$1" -t "$2" -u "$3" -m "$4" -s "$5" -xu "$6" -xp "$7" > /dev/null 2>&1
            ;;
    esac

    [ $? -eq 0 ] && return 0 || return 1
}
#==================================================== Example ====
#FROM="foo@gmail.com"; TO="bar@foo.com"; TITLE="hi"; MSG="how are you?"
#USER="foo"; PASSWD="secret"
#[ $(_mail gmail $FROM $TO $TITLE $MESSAGE $USER $PASSWD) -eq 0 ] && echo "send" || echo "error"

#FROM="foo@custom.com"; TO="bar@foo.com"; TITLE="hi"; MSG="how are you?"
#SERVER="smpt.custom.com:port"; USER="foo"; PASSWD="secret"
#[ $(_mail $FROM $TO $TITLE $MESSAGE $SERVER $USER $PASSWD) -eq 0 ] && echo "send" || echo "error"
#=================================================================

_notify()
{   #notify a msg
    [ -z $1 ] && return 1

    if [ "$TERM" = linux ] || [ "$TERM" = dumb ]; then
        notify-send -t 3000 "${@}"
    else
        echo -n "${1}: "
        shift
        while [ -n "$*" ]
        do
            echo "${1}"
            shift
        done
    fi
}
#==================================================== Example ====
#_notify "You need html2text" "\$ sudo apt-get install html2text"
#=================================================================

_printtime()
{  #format seconds to a pretty string
    [ -z $1 ] && return 1

    NUM=$1
    MIN=0
    HOUR=0
    DAY=0
    if ((NUM>59)); then
        ((SEC=NUM%60))
        ((NUM=NUM/60))
        if ((NUM>59)); then
            ((MIN=NUM%60))
            ((NUM=NUM/60))
            if ((NUM>23)); then
                ((HOUR=NUM%24))
                ((DAY=NUM/24))
            else
                ((HOUR=NUM))
            fi
        else
            ((MIN=NUM))
        fi
    else
        ((SEC=NUM))
    fi
    echo "$DAY"d "$HOUR"h "$MIN"m "$SEC"s
}
#==================================================== Example ====
#SECONDS=12345
#_printtime $SECONDS #prints "0d 3h 25m 49s"
#=================================================================

_privport()
{   #check if port is a num and if it's privated (<1025), returns 0 on success, 1 otherwise
    [ -z $1 ] && return 1

    echo "$1" | grep -q -v "[^0-9]"
    if [ $? -eq 0 ]; then
        [ $1 -gt 0 ] && [ $1 -lt 1025 ] && return 0 || return 1
    else
        return 1
    fi
}
#==================================================== Example ====
#echo -n "Enter port: "
#read port
#if _privport "$port" ; then #priv ports requires root
    #sudo script $port
#else
    #script $port 
#fi
#=================================================================

_realpath()
{   #convert relative to real paths

    [ -z $1 ] && return 1
    #http://www.makkintosshu.com/journal/a-realpath-implementation-in-bash
    local success=true

    # start with the file name (sans the trailing slash)
    local path="$1"
    path="${path%/}"

    # get the basename of the file (ignoring '.' & '..', because they're really part of the path)
    local file_basename="${path##*/}"
    if [ "$file_basename" = . ] || [ "$file_basename" = .. ]; then
        file_basename=""
    fi

    # extracts the directory component of the full path & attempt to change to it
    local directory="${path%$file_basename}"
    if [ "$directory" ]; then
        if ! cd "$directory" &>/dev/null ; then
            success=false
        fi
    fi

    if $success; then
        # does the filename exist?
        if [ ! -z "$file_basename" ] && [ ! -e "$file_basename" ]; then
            success=false
        fi

        # get the absolute path of the current directory & change back to previous directory
        local abs_path="$(pwd -P)"
        cd "-" &>/dev/null

        # Append base filename to absolute path
        abs_path="${abs_path}/${file_basename}"

        # output the absolute path
        echo "$abs_path"
    fi

    $success
}
#==================================================== Example ====
#relative_path="../Shared/"
#absolute_path="$(_realpath "$relative_path")"
#if [ $? -eq 0 ]; then
	#echo "absolute_path = $absolute_path"
#else
	#echo "'$relative_path' does not exist!"
#fi
#=================================================================

_refarray()
{   #exports an array to another
    #http://ihaveabackup.net/2012/01/29/a-workaround-for-passing-arrays-in-bash/
    [ -z $1 ] && return 1
    local varname="$1"
    local export_as="$2"
    local code=$(declare -p "$varname")
    echo ${code/$varname/$export_as}
}
#==================================================== Example ====
#dump()
#{
    #[ -z $1 ] && return 1
    #eval $(ref_array "$1" array)
    #local key

    #for key in "${!array[@]}"; do
        #printf "Key: %s, value: %s\n" "$key" "${array[$key]}"
    #done
#}

#declare -A PERSON=([name]="John Doe" [age]=22)
#dump PERSON
#=================================================================

_rotate()
{   #shows an animation as long as a process is in memory
    [ -z $1 ] && return 1
    pid=$1
    animation_state=1
    echo -e -n "    "

    while [ "`ps -p $pid -o comm=`" ]; do
        # rotating star
        echo -e -n "\b\b\b"
        case $animation_state in
            1)
                echo -n "["
                echo -n -e "\033[1m|\033[0m"
                echo -n "]"
                animation_state=2
                ;;
            2)
                echo -n "["
                echo -n -e "\033[1m/\033[0m"
                echo -n "]"
                animation_state=3
                ;;
            3)
                echo -n "["
                echo -n -e "\033[1m-\033[0m"
                echo -n "]"
                animation_state=4
                ;;
            4)
                echo -n "["
                echo -n -e "\033[1m"
                echo -n "\\"
                echo -n -e "\033[0m"
                echo -n "]"
                animation_state=1
                ;;
        esac
        sleep 1
    done
    echo -e "\b\b\b\b\b\b\b       "
}
#==================================================== Example ====
#echo -n "[+] tar" && _rotate $(pidof tar)
#=================================================================

_uploadimg()
{   #uploads an image, returns url on success, 1 otherwise
    #requires curl

    [ -z $1 ] && return 1
    for img
    do
        if [ -f "$img" ] ; then
            case "$img" in
                *.jpg)
                    curl -s -F "image=@$img" -F "key=486690f872c678126a2c09a9e196ce1b" http://imgur.com/api/upload.xml \
                        | grep -E -o "<original_image>(.)*</original_image>" | \
                        grep -E -o "http://i.imgur.com/[^<]*" | tee /dev/fd/2 | xclip 
                    ;;
                *.JPG)
                    curl -s -F "image=@$img" -F "key=486690f872c678126a2c09a9e196ce1b" http://imgur.com/api/upload.xml \
                        | grep -E -o "<original_image>(.)*</original_image>" | \
                        grep -E -o "http://i.imgur.com/[^<]*" | tee /dev/fd/2 | xclip 
                    ;;
                *.jpeg)
                    curl -s -F "image=@$img" -F "key=486690f872c678126a2c09a9e196ce1b" http://imgur.com/api/upload.xml \
                        | grep -E -o "<original_image>(.)*</original_image>" | \
                        grep -E -o "http://i.imgur.com/[^<]*" | tee /dev/fd/2 | xclip 
                    ;;
                *.png)
                    curl -s -F "image=@$img" -F "key=486690f872c678126a2c09a9e196ce1b" http://imgur.com/api/upload.xml \
                        | grep -E -o "<original_image>(.)*</original_image>" | \
                        grep -E -o "http://i.imgur.com/[^<]*" | tee /dev/fd/2 | xclip 
                    ;;
                *.PNG)
                    curl -s -F "image=@$img" -F "key=486690f872c678126a2c09a9e196ce1b" http://imgur.com/api/upload.xml \
                        | grep -E -o "<original_image>(.)*</original_image>" | \
                        grep -E -o "http://i.imgur.com/[^<]*" | tee /dev/fd/2 | xclip 
                    ;;
                *)
                    return 1
                    ;;
            esac
        else
            return 1
        fi
    done
}
#==================================================== Example ====
#_upload_img file.png
#=================================================================

_upper()
{   #returns upper string
    [ -z $1 ] && return 1
    echo $@ | tr '[:lower:]' '[:upper:]'
}
#==================================================== Example ====
#string="foo bar"
#upper=$(_upper $string)
#=================================================================

_usage()
{   #prints an usage msg and exits with 0
    echo "Usage: `basename $0` [OPTION] FILE"
    echo "  -a   description"
    echo "  -b   description" 
    echo "  -c   description" 
    exit 0
}
#===================================================== Example ====
#case $1 in
  #-h | --help | h | help ) _usage;;
#esac
#=================================================================

_waitfor()
{   #wait for a program, shows an animation
    [ -z $1 ] && return 1

    echo -n "    $ $@ ..."
    $@ > /dev/null 2>&1 &
    sleep 1s

    running=$(pidof $1); running=$?
    if [ "$running" = 1 ]; then
        echo
    else
        pid=$(pidof $1)
        animation_state=1
        echo -e -n "    "

        while [ "`ps -p $pid -o comm=`" ]; do
            # rotating star
            echo -e -n "\b\b\b"
            case $animation_state in
                1)
                    echo -n "["
                    echo -n -e "\033[1m|\033[0m"
                    echo -n "]"
                    animation_state=2
                    ;;
                2)
                    echo -n "["
                    echo -n -e "\033[1m/\033[0m"
                    echo -n "]"
                    animation_state=3
                    ;;
                3)
                    echo -n "["
                    echo -n -e "\033[1m-\033[0m"
                    echo -n "]"
                    animation_state=4
                    ;;
                4)
                    echo -n "["
                    echo -n -e "\033[1m"
                    echo -n "\\"
                    echo -n -e "\033[0m"
                    echo -n "]"
                    animation_state=1
                    ;;
            esac
            sleep 1
        done
        echo -e "\b\b\b   "
        echo
    fi
}
#==================================================== Example ====
#_waitfor tar -jxpf file.tar.bz2
#=================================================================
