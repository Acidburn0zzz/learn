#!/usr/bin/env bash
#functions, copy and paste them in your own scripts

#https://github.com/chilicuil/learn/blob/master/sh/lib
#if you have more please send your push request!

_arch()
{
    local arch
    [ -z $MACHTYPE ] && arch=$(uname -m) || arch=$(echo $MACHTYPE | cut -d- -f1)

    case $arch in
        x86_64)
            arch=64;
            ;;
        i686)
            arch=32;
            ;;
    esac

    echo $arch
}
#==================================================== Sample use =
arch=$(_arch)
echo $arch
#==================================================== Sample use =

_checkinternet()
{   #returns 0 on success, 1 otherwise
    wget --tries=3 --timeout=5 http://www.google.com -O /tmp/index.google > /dev/null 2>&1

    if [ -s /tmp/index.google ]; then
        rm /tmp/index.google
        return 0
    else
        rm /tmp/index.google
        return 1
    fi
}
#==================================================== Sample use =
if ! _checkinternet; then
    echo "You must be connected to run this script" >&2
    exit 1
fi
#==================================================== Sample use =

_cleanup()
{
    #clean tmp files, exit with no parameters
    stty echo
    echo
    echo "[+] cleanup ..."
    rm FILE

    [ -z $1 ] && exit
}
#==================================================== Sample use =
trap _cleanup SIGINT SIGTERM #trap ctrl-c
_cleanup 1
#==================================================== Sample use =

_cmd()
{
    #prints current command, exits if fails
    echo "[+] $@"
    $@

    status=$?
    [ $status != 0 ] && exit $status || return
}
#===================================================== Sample use =
_cmd rm file
#===================================================== Sample use =

_die()
{
    #prints a stacktrace, a msg and exits with 1
    local frame=0
    while caller $frame; do
        ((frame++));
    done

    echo "$*"
    exit 1
}
#==================================================== Sample use =
[ -z "$var" ] && _die "$errmsg"
#==================================================== Sample use =

_dirname()
{
    #returns dirnames, faster than basename

    #http://www.linuxmisc.com/12-unix-web-servers/d31beb238f7b5a6b.htm
    local dir="${1%${1##*/}}"
    [ "${dir:=./}" != "/" ] && dir="${dir%?}"
    echo "$dir"
}
#==================================================== Sample use =
_dirname file
#==================================================== Sample use =

_fullpath()
{
    #returns full path of the argument, exits with no parameters
    if [ -z $1 ]; then
        exit;
    else
        if [ `expr substr ${1:-a} 1 2` != "/" ]; then
            full_file=`pwd`"/"$1
        fi
    fi
    echo $full_file
}
#==================================================== Sample use =
_fullpath file
#==================================================== Sample use =

_getopt()
{
    #define vars for cli arguments
    var=""
    wantarg=0
    for (( i=1; i<=$#; i+=1 )); do
        lastvar=$var
        var=${!i}
        if [ "$var" = "" ]; then 
            continue 
        fi
        echo \ $var | grep -q -- '='
        if [ $? -eq 0 ]; then
            ## -*param=value
            var=$(echo \ $var | sed -r s/'^[ ]*-*'/''/)
            myvar=${var%=*}
            myval=${var#*=}
            eval "${myvar}"="'$myval'"
        else
            echo \ $var | grep -E -q -- '^[ ]*-'
            if [ $? -eq 0 ]; then
                ## -*param$
                var=$(echo \ $var | sed -r s/'^[ ]*-*'/''/)
                eval "${var}"=1
                wantarg=1
            else
                echo \ $var | grep -E -- '^[ ]*-'
                if [ $? -eq 0 ]; then
                    # the current one has a dash, so cannot be
                    # the argument to the last parameter
                    wantarg=0
                fi
                if [ $wantarg -eq 1 ]; then
                    # parameter argument
                    val=$var
                    var=$lastvar
                    eval "${var}"="'${val}'"
                    wantarg=0
                else
                    # parameter
                    if [ "${!var}" = "" ]; then
                        eval "${var}"=1
                    fi
                    wantarg=0
                fi
            fi
        fi
    done
}
#===================================================== Sample use =
OIFS=$IFS; IFS=$(echo -e "\n"); _getopt $@; IFS=$OIFS
#./getopts --foo=bar -v -n 10 blah -one='last arg' 
echo -e " foo:\t$foo v:\t$v n:\t$n blah:\t$blah one:\t$one "
#===================================================== Sample use =

_getpasswd()
{
    #define vars with passwords
    if [ -n "$1" ]
    then
        local option=`tr '[:upper:]' '[:lower:]' <<< $1`
        echo -n "Enter your $option password: "
        stty -echo
        read ${option}passwd
        stty echo
        echo
    else
        echo -n "Enter your password: "
        stty -echo
        read passwd
        stty echo
        echo
    fi
}
#==================================================== Sample use =
_getpasswd
echo $passwd
_getpasswd config
echo $configpasswd
#==================================================== Sample use =

_getroot()
{
    #gets sudo's password, define $sudopasswd and $sudocmd

    local tmp_path="/tmp"; local sudotest; local insudoers;

    if [ ! "$LOGNAME" == "root" ]; then
        echo "Detecting user $LOGNAME (non-root) ..."
        echo "Checking if sudo is available ..."
        sudotest=`type sudo &>/dev/null ; echo $?`

        if [ "$sudotest" == 0 ]; then
            sudo -K
            if [ -e "$tmp_path/sudo.test" ]; then
                rm -f "$tmp_path/sudo.test"
            fi
            while [ -z "$sudopwd" ]; do
                echo -n "   - enter sudo-password: "
                stty -echo
                read sudopwd
                stty echo

                # password check
                echo "$sudopwd" | sudo -S touch "$tmp_path/sudo.test" > "$tmp_path/sudo.output" 2>&1
                insudoers=$(grep -i "sudoers" "$tmp_path/sudo.output")
                if [ -n "$insudoers" ]; then
                    echo "$sudopwd" | sudo -S rm "$tmp_path/sudo.output" > /dev/null 2>&1
                    exit
                fi

                if [ ! -e "$tmp_path/sudo.test" ]; then
                    sudopwd=""
                fi
            done

            sudocmd="/usr/bin/sudo -S"

            echo "$sudopwd" | $sudocmd rm -f "$tmp_path/sudo.test" > /dev/null 2>&1
            echo
        else
            echo "You're not root and sudo isn't available. Please run this script as root!"
            exit
        fi
    fi
}
#==================================================== Sample use =
_getroot
echo "$sudopwd" | $sudocmd rm file
#==================================================== Sample use =

_isalphanum()
{
  # validate arg: returns 0 if all upper+lower+digits, 1 otherwise

  # Remove all unacceptable chars
  compressed="$(echo $1 | sed -e 's/[^[:alnum:]]//g')"

  [ "$compressed" != "$input" ] && return 1 || return 0
}
#==================================================== Sample use =
echo -n "Enter input: "
read input
if ! _isalphanum "$input" ; then
    echo "Your input must consist of only letters and numbers." >&2
    exit 1
else
    echo "Input is valid."
fi
exit 0
#==================================================== Sample use =

_islivecd()
{
    grep -qs boot=live /proc/cmdline && return 0
    grep -qs boot=casper /proc/cmdline && return 0
    return 1
}
#==================================================== Sample use =
if ! _islivecd ; then
    echo "Live cd detected"
else
    echo "Non LiveCd detected"
fi
exit 0

#==================================================== Sample use =
_inarray ()
{
    #checks if a value exists in an array, returns 0 on success, 1 otherwise
    [ -n "$1" ] || { echo "$FUNCNAME: requires at least 1 param"; exit 1; }

    local needle="$1" element
    shift
    for element
    do
        [[ $element != $needle ]] || return 0
    done
    return 1
}
#==================================================== Sample use =
_inarray $name ${names[@]} && echo found!
#==================================================== Sample use =

_isnum()
{   #returns 0 on success, 1 otherwise
    echo "$@" | grep -q -v "[^0-9]"
}
#==================================================== Sample use =
echo -n "Enter input: "
read input
if ! _isnum "$input" ; then
    echo "Your input must consist of only numbers." >&2
    exit 1
else
    echo "Input is valid."
fi
exit 0
#==================================================== Sample use =

_lower()
{
    #returns lower string
    echo $@ | tr '[:upper:]' '[:lower:]' 
}
#==================================================== Sample use =
string="FOO BAR"
_upper $string
#==================================================== Sample use =

_notify()
{
    if [[ $TERM == "linux" ]] || [[ $TERM == "dumb" ]]; then
        notify-send -t 3000 "${@}"
    else
        echo -n "${1}: "
        shift
        while [ -n "$*" ]
        do
            echo "${1}"
            shift
        done
    fi
}
#==================================================== Sample use =
_notify "You need html2text" "\$ sudo apt-get install html2text"
#==================================================== Sample use =

_realpath()
{
    #http://www.makkintosshu.com/journal/a-realpath-implementation-in-bash
    local success=true

    # start with the file name (sans the trailing slash)
    local path="$1"
    path="${path%/}"

    # get the basename of the file (ignoring '.' & '..', because they're really part of the path)
    local file_basename="${path##*/}"
    if [[ ( "$file_basename" = "." ) || ( "$file_basename" = ".." ) ]]; then
        file_basename=""
    fi

    # extracts the directory component of the full path & attempt to change to it
    local directory="${path%$file_basename}"
    if [ "$directory" ]; then
        if ! cd "$directory" &>/dev/null ; then
            success=false
        fi
    fi

    if $success; then
        # does the filename exist?
        if [[ ( ! -z "$file_basename" ) && ( ! -e "$file_basename" ) ]]; then
            success=false
        fi

        # get the absolute path of the current directory & change back to previous directory
        local abs_path="$(pwd -P)"
        cd "-" &>/dev/null

        # Append base filename to absolute path
        abs_path="${abs_path}/${file_basename}"

        # output the absolute path
        echo "$abs_path"
    fi

    $success
}
#==================================================== Sample use =
relative_path="../Shared/"
absolute_path="$(_realpath "$relative_path")"
if [ $? -eq 0 ]; then
	echo "absolute_path = $absolute_path"
else
	echo "'$relative_path' does not exist!"
fi
#==================================================== Sample use =

_rotate()
{
    #shows an animation as long as a process is in memory
    pid=$1
    animation_state=1

    while [ "`ps -p $pid -o comm=`" ]; do
        # rotating star
        echo -e -n "\b\b\b"
        case $animation_state in
            1)
                echo -n "["
                echo -n -e "\033[1m|\033[0m"
                echo -n "]"
                animation_state=2
                ;;
            2)
                echo -n "["
                echo -n -e "\033[1m/\033[0m"
                echo -n "]"
                animation_state=3
                ;;
            3)
                echo -n "["
                echo -n -e "\033[1m-\033[0m"
                echo -n "]"
                animation_state=4
                ;;
            4)
                echo -n "["
                echo -n -e "\033[1m"
                echo -n "\\"
                echo -n -e "\033[0m"
                echo -n "]"
                animation_state=1
                ;;
        esac
        sleep 1
    done
}
#==================================================== Sample use =
_rotate $(pidof tar)
#==================================================== Sample use =

_uploadimg()
{   
    #returns url, 1 on error
    for img
    do
        if [ -f "$img" ] ; then
            case "$img" in
                *.jpg)
                    curl -s -F "image=@$img" -F "key=486690f872c678126a2c09a9e196ce1b" http://imgur.com/api/upload.xml \
                        | grep -E -o "<original_image>(.)*</original_image>" | \
                        grep -E -o "http://i.imgur.com/[^<]*" | tee /dev/fd/2 | xclip 
                    ;;
                *.JPG)
                    curl -s -F "image=@$img" -F "key=486690f872c678126a2c09a9e196ce1b" http://imgur.com/api/upload.xml \
                        | grep -E -o "<original_image>(.)*</original_image>" | \
                        grep -E -o "http://i.imgur.com/[^<]*" | tee /dev/fd/2 | xclip 
                    ;;
                *.jpeg)
                    curl -s -F "image=@$img" -F "key=486690f872c678126a2c09a9e196ce1b" http://imgur.com/api/upload.xml \
                        | grep -E -o "<original_image>(.)*</original_image>" | \
                        grep -E -o "http://i.imgur.com/[^<]*" | tee /dev/fd/2 | xclip 
                    ;;
                *.png)
                    curl -s -F "image=@$img" -F "key=486690f872c678126a2c09a9e196ce1b" http://imgur.com/api/upload.xml \
                        | grep -E -o "<original_image>(.)*</original_image>" | \
                        grep -E -o "http://i.imgur.com/[^<]*" | tee /dev/fd/2 | xclip 
                    ;;
                *.PNG)
                    curl -s -F "image=@$img" -F "key=486690f872c678126a2c09a9e196ce1b" http://imgur.com/api/upload.xml \
                        | grep -E -o "<original_image>(.)*</original_image>" | \
                        grep -E -o "http://i.imgur.com/[^<]*" | tee /dev/fd/2 | xclip 
                    ;;
                *)
                    echo "'$img' is not a valid img file"
                    ;;
            esac
        else
            echo "'$img' doesn't exist"
        fi
    done
}
#==================================================== Sample use =
_upload_img "$@"
#==================================================== Sample use =

_upper()
{
    #returns upper string
    echo $@ | tr '[:lower:]' '[:upper:]'
}
#==================================================== Sample use =
string="foo bar"
_upper $string
#==================================================== Sample use =

_usage()
{
    echo "Usage: `basename $0` [OPTION] FILE"
    echo "  -a   description"
    echo "  -b   description" 
    echo "  -c   description" 
    exit 0
}
#===================================================== Sample use =
case $1 in
  -h | --help | h | help ) _usage;;
esac
#===================================================== Sample use =

_waitfor()
{
    #wait for a program, shows an animation
    status=$?
    [ $status != 0 ] && exit $status

    echo "[+] $@"
    $@ &

    running=$(pidof $1); running=$?
    if [ "$running" == "1" ]; then
        echo -e "\b\b\b\b\b done"
    else
        _rotate $(pidof $1)
        echo -e "\b\b\b\b\b done"
    fi
}
#==================================================== Sample use =
_waitfor tar -jxpf file.tar.bz2
#==================================================== Sample use =

_yesno()
{
    [ -n "$1" ] || { echo "$FUNCNAME: requires a question"; exit 1; }
    [ -z "$2"    ] && echo -ne "$1 (y/n): "
    [ "$2" = yes ] && echo -ne "$1 (Y/n): "
    [ "$2" = no  ] && echo -ne "$1 (y/N): "

    local answer
    read answer
    answer=`tr '[:upper:]' '[:lower:]' <<< $answer`

    if [ "$answer" = y -o "$answer" = yes ] || [ -z "$answer" -a "$2" = yes ]; then
        return 0
    else
        return 1
    fi
}
#==================================================== Sample use =
_yesno "Do you want to continue?" #default to 'no'
_yesno "Do you want to continue?" yes #default behavior
_yesno "Do you want to continue?" no  #default behavior
#==================================================== Sample use =
